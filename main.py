import os
import logging
import asyncio
import random
import time
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    Filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Quiz modes
class QuizMode(Enum):
    QUICK = "mode_quick"
    EASY = "difficulty_easy"
    MEDIUM = "difficulty_medium"
    HARD = "difficulty_hard"
    TOPICS = "mode_topics"
    SINGLE = "mode_single"

# State management
user_states: Dict[int, Dict] = {}
user_scores: Dict[int, Dict] = {}

# Quiz questions (example)
quiz_questions = [
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ë) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
]

class TimerManager:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤"""
    def __init__(self):
        self.timers: Dict[str, asyncio.Task] = {}

    async def set_timer(self, key: str, delay: float, callback, *args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        self.cancel_timer(key)
        task = asyncio.create_task(self._timer_task(key, delay, callback, args))
        self.timers[key] = task

    def cancel_timer(self, key: str):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        if key in self.timers:
            self.timers[key].cancel()
            del self.timers[key]

    async def _timer_task(self, key: str, delay: float, callback, args):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞"""
        try:
            await asyncio.sleep(delay)
            await callback(*args)
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"Timer error: {e}")
        finally:
            self.cancel_timer(key)

timer_manager = TimerManager()

def format_question_text(question: Dict, state: Dict, result: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ –±–µ–∑"""
    difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}
    emoji = difficulty_emoji.get(question["difficulty"], "‚ö™")
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    if result:
        text += f"\n{result}"
    else:
        text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å <b>{question['time_limit']}</b> —Å–µ–∫—É–Ω–¥!"
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    try:
        await update.message.reply_text(
            f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–∏–≤–µ—Ç, {user.first_name}!",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="quiz_menu")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤", callback_data="dictionary")],
        [InlineKeyboardButton("üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π", callback_data="course")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    text = "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    keyboard = [
        [InlineKeyboardButton("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data=QuizMode.QUICK.value)],
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data=QuizMode.EASY.value)],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data=QuizMode.MEDIUM.value)],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data=QuizMode.HARD.value)],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–∞–º", callback_data=QuizMode.TOPICS.value)],
        [InlineKeyboardButton("üîÄ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=QuizMode.SINGLE.value)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in quiz_menu: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    topics = sorted(set(q["topic"] for q in quiz_questions))
    keyboard = [[InlineKeyboardButton(f"{i}. {topic}", callback_data=f"topic_{topic}")] for i, topic in enumerate(topics, 1)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_quiz_menu")])
    try:
        await query.edit_message_text(
            text="üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_topic_selection: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str, topic: Optional[str] = None):
    """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    config = {
        QuizMode.QUICK.value: {"count": 5, "difficulty_filter": ["easy", "medium", "hard"]},
        QuizMode.EASY.value: {"count": 10, "difficulty_filter": ["easy"]},
        QuizMode.MEDIUM.value: {"count": 15, "difficulty_filter": ["medium"]},
        QuizMode.HARD.value: {"count": 20, "difficulty_filter": ["hard"]},
        QuizMode.TOPICS.value: {"count": 15, "topic": topic},
        QuizMode.SINGLE.value: {"count": 1, "difficulty_filter": ["easy", "medium", "hard"]}
    }[mode]
    
    questions = (
        [q for q in quiz_questions if q["topic"] == config["topic"]]
        if "topic" in config
        else [q for q in quiz_questions if q["difficulty"] in config["difficulty_filter"]]
    )
    
    if not questions:
        try:
            await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error in start_quiz: {e}")
        return
    
    user_states[chat_id] = {
        "mode": "quiz_session",
        "questions": random.sample(questions, min(len(questions), config["count"])),
        "current_index": 0,
        "correct_answers": 0,
        "start_time": time.time(),
        "answered": False
    }
    
    try:
        await ask_question(chat_id, context.bot)
    except Exception as e:
        logger.error(f"Error starting quiz: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")

async def ask_question(chat_id: int, bot):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if chat_id not in user_states:
        return
    
    state = user_states[chat_id]
    if state["current_index"] >= len(state["questions"]):
        await finish_quiz(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    state["current_question"] = question
    state["start_time"] = time.time()
    state["answered"] = False
    
    text = format_question_text(question, state)
    # Dynamic button generation
    keyboard = [[InlineKeyboardButton(opt[:1], callback_data=f"answer_{opt[:1]}") for opt in question["options"]]]
    
    try:
        message = await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        state["last_message_id"] = message.message_id
        await timer_manager.set_timer(
            f"timeout_{chat_id}",
            question["time_limit"],
            handle_timeout,
            chat_id,
            bot
        )
    except Exception as e:
        logger.error(f"Error in ask_question: {e}")
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")

async def handle_timeout(chat_id: int, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    question = state["current_question"]
    
    user_scores.setdefault(chat_id, {"correct": 0, "total": 0, "name": "–ê–Ω–æ–Ω–∏–º"})["total"] += 1
    result_text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    text = format_question_text(question, state, result=result_text)
    
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=state["last_message_id"],
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in handle_timeout: {e}")
    
    state["current_index"] += 1
    await asyncio.sleep(2)
    await ask_question(chat_id, bot)

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    user_answer = query.data.replace("answer_", "")
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    
    user_scores.setdefault(chat_id, {
        "correct": 0,
        "total": 0,
        "name": query.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    })["total"] += 1
    
    question = state["current_question"]
    is_correct = user_answer == question["answer"]
    response_time = time.time() - state["start_time"]
    
    if is_correct:
        state["correct_answers"] += 1
        user_scores[chat_id]["correct"] += 1
        message = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> üéâ"
        if response_time < question["time_limit"] / 2:
            message += " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!"
    else:
        message = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    
    message += f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.1f}—Å"
    
    try:
        await query.edit_message_text(text=message, parse_mode="HTML")
        state["current_index"] += 1
        await asyncio.sleep(1.5)
        await ask_question(chat_id, context.bot)
    except Exception as e:
        logger.error(f"Error in check_answer: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")

async def finish_quiz(chat_id: int, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if chat_id not in user_states:
        return
    
    state = user_states[chat_id]
    score = user_scores.get(chat_id, {"correct": 0, "total": 0})
    correct = state["correct_answers"]
    total = len(state["questions"])
    percentage = (correct / total) * 100 if total > 0 else 0
    
    text = (
        f"üèÅ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n\n"
    )
    
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 70:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 50:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in finish_quiz: {e}")
    
    del user_states[chat_id]

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_scores:
        await query.edit_message_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", parse_mode="HTML")
        return
    
    score = user_scores[chat_id]
    total = max(score["total"], 1)
    percentage = (score["correct"] / total) * 100
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üë§ –ò–º—è: {score.get('name', '–ê–Ω–æ–Ω–∏–º')}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n\n"
    )
    
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 70:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 50:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_stats: {e}")

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if not user_scores:
        await query.edit_message_text("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç", parse_mode="HTML")
        return
    
    sorted_users = sorted(
        user_scores.values(),
        key=lambda x: (x["correct"] / max(x["total"], 1), x["correct"]),
        reverse=True
    )[:10]
    
    text = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
    for i, user in enumerate(sorted_users, 1):
        percentage = (user["correct"] / max(user["total"], 1)) * 100
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{medal} {user.get('name', '–ê–Ω–æ–Ω–∏–º')} - {percentage:.1f}%\n"
    
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in show_leaderboard: {e}")

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    try:
        await query.edit_message_text(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in back_to_main: {e}")

async def back_to_quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    await quiz_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    chat_id = update.effective_chat.id
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    if chat_id in user_states:
        del user_states[chat_id]
    try:
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in cancel: {e}")

async def dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Placeholder for dictionary functionality"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Placeholder for course functionality"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Placeholder for help functionality"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="‚ùì –ü–æ–º–æ—â—å: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞, /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(quiz_menu, pattern="^quiz_menu$"))
    app.add_handler(CallbackQueryHandler(show_topic_selection, pattern=f"^{QuizMode.TOPICS.value}$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(back_to_quiz_menu, pattern="^back_to_quiz_menu$"))
    app.add_handler(CallbackQueryHandler(dictionary, pattern="^dictionary$"))
    app.add_handler(CallbackQueryHandler(course, pattern="^course$"))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    for mode in QuizMode:
        app.add_handler(CallbackQueryHandler(
            lambda update, ctx, m=mode.value: start_quiz(update, ctx, m),
            pattern=f"^{mode.value}$"
        ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    app.add_handler(CallbackQueryHandler(
        lambda update, ctx: start_quiz(
            update,
            ctx,
            QuizMode.TOPICS.value,
            topic=update.callback_query.data.replace("topic_", "")
        ),
        pattern="^topic_"
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(check_answer, pattern="^answer_"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()