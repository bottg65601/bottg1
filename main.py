import os
import logging
import asyncio
import random
import time
import json
import math
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# State management
user_states = {}
user_scores = {}
achievements = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "data_file": "user_data.json",
    "backup_interval": 3600,  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏
    "progress_chars": "‚¨úüü©",
    "progress_length": 10
}

# Quiz questions based on economic theory lectures - organized by topics
quiz_questions = [
    # –õ–µ–∫—Ü–∏—è 1: –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ë) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –Ω–∞—É–∫–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é", "–ë) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é", "–í) –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥ –Ω–∞—É—á–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏?",
        "options": ["–ê) –û—Ç–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ", "–ë) –ò–∑—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤", "–í) –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã?",
        "options": ["–ê) –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞", "–ë) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ã", "–í) –¢–æ–ª—å–∫–æ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤—ã–¥–µ–ª—è—é—Ç –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ —Ç—Ä—É–¥ –∏ –∫–∞–ø–∏—Ç–∞–ª", "–ë) –î–µ–Ω—å–≥–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–í) –ó–µ–º–ª—è, –∫–∞–ø–∏—Ç–∞–ª, —Ç—Ä—É–¥, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"],
        "answer": "–í",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?",
        "options": ["–ê) –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–ë) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤", "–í) –î–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏?",
        "options": ["–ê) –ü—Ä—è–º—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã", "–ë) –ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã", "–í) –¶–µ–Ω–Ω–æ—Å—Ç—å –±–ª–∞–≥ –ø—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },

    # –õ–µ–∫—Ü–∏—è 2: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
    {
        "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è, –∫–æ–º–∞–Ω–¥–Ω–æ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è, —Ä—ã–Ω–æ—á–Ω–∞—è, —Å–º–µ—à–∞–Ω–Ω–∞—è", "–ë) –¢–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω–∞—è –∏ –ø–ª–∞–Ω–æ–≤–∞—è", "–í) –ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏ —Å–æ—Ü–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É?",
        "options": ["–ê) –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ë) –†–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–∞–¥–∏—Ü–∏—è–º –∏ –æ–±—ã—á–∞—è–º", "–í) –†—ã–Ω–æ—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },
    {
        "question": "–ö–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∏ –∞–∑–∏–∞—Ç—Å–∫–∞—è", "–ë) –°–µ–≤–µ—Ä–Ω–∞—è –∏ —é–∂–Ω–∞—è", "–í) –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è, —à–≤–µ–¥—Å–∫–∞—è, –≥–µ—Ä–º–∞–Ω—Å–∫–∞—è, –∫–∏—Ç–∞–π—Å–∫–∞—è"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É?",
        "options": ["–ê) –ß–∞—Å—Ç–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫", "–ë) –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–í) –¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ –æ–±—ã—á–∞–∏"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },

    # –õ–µ–∫—Ü–∏—è 3: –†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä—ã–Ω–æ–∫ –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏?",
        "options": ["–ê) –ú–µ—Å—Ç–æ —Ç–æ—Ä–≥–æ–≤–ª–∏", "–ë) –¢–æ–ª—å–∫–æ –±–∏—Ä–∂–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–í) –°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –æ–±–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –¥–µ–Ω–µ–≥"],
        "answer": "–í",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –∑–∞–∫–æ–Ω —Å–ø—Ä–æ—Å–∞?",
        "options": ["–ê) –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –æ–±—ä–µ–º —Å–ø—Ä–æ—Å–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è", "–ë) –°–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–Ω—ã", "–í) –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ü–µ–Ω—ã —Å–ø—Ä–æ—Å —Ä–∞—Å—Ç–µ—Ç"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞?",
        "options": ["–ê) –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ —Å–ø—Ä–æ—Å–∞", "–ë) –ú–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏ –æ–±—ä–µ–º–∞ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã", "–í) –†–æ—Å—Ç —Å–ø—Ä–æ—Å–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ü–µ–Ω—ã"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä—ã–Ω–æ—á–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã", "–ë) –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è", "–í) –°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö —Ñ–æ—Ä–º, —Å–≤—è–∑—ã–≤–∞—é—â–∏—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤ —Ä—ã–Ω–∫–∞"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"
    },
    {
        "question": "–ß—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±–∏—Ä–∂–∞?",
        "options": ["–ê) –§–æ—Ä–º–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø—Ç–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞", "–ë) –†–æ–∑–Ω–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", "–í) –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º"
    },

    # –õ–µ–∫—Ü–∏—è 4: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ?",
        "options": ["–ê) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ë) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—É–±—ä–µ–∫—Ç–æ–≤ –∑–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", "–í) –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },
    {
        "question": "–ö–∞–∫–∏–µ –≤–∏–¥—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ —Ü–µ–Ω–æ–≤–∞—è", "–ë) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —á–∞—Å—Ç–Ω–∞—è", "–í) –°–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–Ω–æ–ø–æ–ª–∏—è?",
        "options": ["–ê) –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ö–æ–∑—è–π—Å—Ç–≤—É—é—â–µ–≥–æ —Å—É–±—ä–µ–∫—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ", "–ë) –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "–í) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –º–æ–Ω–æ–ø–æ–ª–∏–π –≤—ã–¥–µ–ª—è—é—Ç –ø–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—é?",
        "options": ["–ê) –ë–æ–ª—å—à–∞—è –∏ –º–∞–ª–∞—è", "–ë) –ó–∞–∫—Ä—ã—Ç–∞—è, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –æ—Ç–∫—Ä—ã—Ç–∞—è", "–í) –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏ –≤–Ω–µ—à–Ω—è—è"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ–ª–∏–≥–æ–ø–æ–ª–∏—é?",
        "options": ["–ê) –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", "–ë) –û–¥–∏–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞ —Ä—ã–Ω–∫–µ", "–í) –ì–æ—Å–ø–æ–¥—Å—Ç–≤–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∏—Ä–º –Ω–∞ —Ä—ã–Ω–∫–µ"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },

    # –õ–µ–∫—Ü–∏—è 5: –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –∏–∑–¥–µ—Ä–∂–∫–∏
    {
        "question": "–ö–∞–∫–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º?",
        "options": ["–ê) –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å—ã—Ä—å–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ë) –†–∞—Å—Ö–æ–¥—ã, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –æ–±—ä–µ–º–∞ –≤—ã–ø—É—Å–∫–∞–µ–º–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–í) –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Ä–∞–±–æ—á–∏—Ö"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è?",
        "options": ["–ê) –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–ë) –ü–ª–∞–Ω –≤—ã–ø—É—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–í) –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±—ä–µ–º–æ–º –≤—ã–ø—É—Å–∫–∞"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    },
    {
        "question": "–ö–∞–∫–∏–µ –≤–∏–¥—ã –ø—Ä–∏–±—ã–ª–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è", "–ë) –¢–æ–ª—å–∫–æ –≤–∞–ª–æ–≤–∞—è", "–í) –ß–∏—Å—Ç–∞—è –∏ –≥—Ä—è–∑–Ω–∞—è"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    },

    # –õ–µ–∫—Ü–∏—è 6: –†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–µ–º–µ–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞?",
        "options": ["–ê) –ù–∞–ª–æ–≥ –Ω–∞ –∑–µ–º–ª—é", "–ë) –î–æ—Ö–æ–¥, –ø–æ–ª—É—á–∞–µ–º—ã–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º –∑–µ–º–ª–∏ –æ—Ç —Å–¥–∞—á–∏ –µ–µ –≤ –∞—Ä–µ–Ω–¥—É", "–í) –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤", "–ë) –†–∞–∑–º–µ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã", "–í) –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–∏–ª—ã"],
        "answer": "–í",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
    },

    # –õ–µ–∫—Ü–∏—è 7: –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç (–í–í–ü)?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω—ã", "–ë) –û–±—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–µ", "–í) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –≤ —Å—Ç—Ä–∞–Ω–µ"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤?",
        "options": ["–ê) –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", "–ë) –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", "–í) –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },

    # –õ–µ–∫—Ü–∏—è 8: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª?",
        "options": ["–ê) –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ë) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω", "–í) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –≠–∫—Å—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π", "–ë) –ë—ã—Å—Ç—Ä—ã–π –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π", "–í) –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–∏–π"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã"
    },

    # –õ–µ–∫—Ü–∏—è 9: –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω", "–ë) –£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω", "–ë) –ü–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞?",
        "options": ["–ê) –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω", "–ë) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–í) –í–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–≥—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π", "–ë) –°–ø–∞–¥ —Å –¥–µ—Ñ–ª—è—Ü–∏–µ–π", "–í) –ó–∞—Å—Ç–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∏–¥ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã?",
        "options": ["–ê) –§—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è", "–ë) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è", "–í) –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    },

    # –õ–µ–∫—Ü–∏—è 10: –ë—é–¥–∂–µ—Ç–Ω–æ-–Ω–∞–ª–æ–≥–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –±—é–¥–∂–µ—Ç–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç?",
        "options": ["–ê) –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–¥ —Ä–∞—Å—Ö–æ–¥–∞–º–∏", "–ë) –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±—é–¥–∂–µ—Ç–∞ –Ω–∞–¥ –¥–æ—Ö–æ–¥–∞–º–∏", "–í) –†–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
    },
    {
        "question": "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ñ–∏—Å–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –¥–µ–Ω–µ–∂–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É", "–ë) –ë—é–¥–∂–µ—Ç–Ω–æ-–Ω–∞–ª–æ–≥–æ–≤—ã–µ –º–µ—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞", "–í) –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
    },

    # –õ–µ–∫—Ü–∏—è 11: –î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
    {
        "question": "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –¥–µ–Ω—å–≥–∏?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–∞", "–ë) –¢–æ–ª—å–∫–æ –º–µ—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", "–í) –ú–µ—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —Å—Ä–µ–¥—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏—è, —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –º–æ–Ω–µ—Ç–∞—Ä–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É?",
        "options": ["–ê) –ù–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ë) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π –º–∞—Å—Å–æ–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏", "–í) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    },
    {
        "question": "–ö–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë?",
        "options": ["–ê) –°–Ω–∏–∂–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏—é", "–ë) –°—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ", "–í) –£–º–µ–Ω—å—à–∞–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    },
    {
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã?",
        "options": ["–ê) –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã", "–ë) –û—Å–ª–∞–±–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    },

    # –õ–µ–∫—Ü–∏—è 12: –ú–∏—Ä–æ–≤–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏—Ä–æ–≤–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ?",
        "options": ["–ê) –≠–∫–æ–Ω–æ–º–∏–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã", "–ë) –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏–∫", "–í) –¢–æ–ª—å–∫–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ú–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω (–ò–ü–¶)?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–ë) –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã", "–í) –û–±—ä–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –î–∂–∏–Ω–∏?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏", "–ë) –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤", "–í) –¢–µ–º–ø —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 25,
        "topic": "–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤?",
        "options": ["–ê) –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "–ë) –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", "–í) –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å–≥–∏"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏"
    }
]

class TimerManager:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤"""
    def __init__(self):
        self.timers = {}
        self.lock = threading.Lock()
    
    def set_timer(self, key, delay, callback, *args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        with self.lock:
            if key in self.timers:
                self.timers[key].cancel()
            
            timer = threading.Timer(delay, self._timer_callback, args=(key, callback, args))
            timer.daemon = True
            self.timers[key] = timer
            timer.start()
    
    def cancel_timer(self, key):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        with self.lock:
            if key in self.timers:
                self.timers[key].cancel()
                del self.timers[key]
    
    def _timer_callback(self, key, callback, args):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π callback —Ç–∞–π–º–µ—Ä–∞"""
        try:
            callback(*args)
        except Exception as e:
            logger.error(f"Timer callback error: {e}")
        finally:
            with self.lock:
                if key in self.timers:
                    del self.timers[key]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤
timer_manager = TimerManager()

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.running = True
        self.cleanup_interval = 300  # 5 –º–∏–Ω—É—Ç

    def send_message(self, chat_id, text, reply_markup=None):
        """Send message to Telegram chat with improved error handling"""
        try:
            if isinstance(text, str):
                text = text.encode('utf-8').decode('utf-8')
            
            data = {
                'chat_id': str(chat_id),
                'text': text[:4096],
                'parse_mode': 'HTML'
            }

            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup, ensure_ascii=False)

            req_data = urllib.parse.urlencode(data, safe='', encoding='utf-8').encode('utf-8')
            request = urllib.request.Request(f"{self.api_url}/sendMessage", data=req_data)
            request.add_header('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')

            with urllib.request.urlopen(request, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                if not result.get('ok'):
                    logger.error(f"API error: {result}")
                return result
                    
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
            return None

    def cleanup_old_states(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            current_time = time.time()
            cutoff_time = current_time - 1800  # 30 –º–∏–Ω—É—Ç
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            expired_users = []
            for chat_id, state in user_states.items():
                last_activity = state.get('last_activity', current_time)
                if last_activity < cutoff_time:
                    expired_users.append(chat_id)
            
            for chat_id in expired_users:
                timer_manager.cancel_timer(f"quiz_{chat_id}")
                if chat_id in user_states:
                    del user_states[chat_id]
                    
            if expired_users:
                logger.info(f"Cleaned up {len(expired_users)} expired user states")
                
        except Exception as e:
            logger.error(f"Cleanup error: {e}")

    def _question_timer_callback(self, chat_id):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π callback —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            if chat_id not in user_states:
                return

            state = user_states[chat_id]
            if state.get('answered', False) or state.get('mode') not in ['quiz', 'quiz_session']:
                return

            state['answered'] = True
            question = state.get('current_question')
            if not question:
                return

            correct_answer = question['answer']

            if chat_id not in user_scores:
                user_scores[chat_id] = {
                    'name': "–ê–Ω–æ–Ω–∏–º",
                    'correct': 0,
                    'incorrect': 0,
                    'total': 0
                }

            if state.get('mode') == 'quiz_session':
                self._handle_session_timeout(chat_id, correct_answer)
            else:
                self._handle_single_timeout(chat_id, correct_answer)
                
        except Exception as e:
            logger.error(f"Timer callback error for chat {chat_id}: {e}")

    def _handle_session_timeout(self, chat_id, correct_answer):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Å—Å–∏–∏"""
        try:
            session = user_states[chat_id]
            user_scores[chat_id]['total'] += 1
            user_scores[chat_id]['incorrect'] += 1

            if session['current_question_num'] >= session['questions_count']:
                session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
                total_percentage = round((user_scores[chat_id]['correct'] / user_scores[chat_id]['total']) * 100, 1)

                text = (
                    f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
                    f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['session_correct']}/{session['questions_count']}\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç: {session_percentage}%\n\n"
                    f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_scores[chat_id]['correct']}\n"
                    f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%"
                )
                self.send_message(chat_id, text, self.get_main_keyboard())
                if chat_id in user_states:
                    del user_states[chat_id]
            else:
                session['current_question_num'] += 1
                text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
                self.send_message(chat_id, text)

                timer_manager.set_timer(f"next_question_{chat_id}", 2.0, self.quiz_question_session, chat_id)
                
        except Exception as e:
            logger.error(f"Session timeout error: {e}")

    def _handle_single_timeout(self, chat_id, correct_answer):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            user_scores[chat_id]['total'] += 1
            user_scores[chat_id]['incorrect'] += 1

            score = user_scores[chat_id]
            percentage = round((score['correct'] / score['total']) * 100, 1)

            text = (
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤
timer_manager = TimerManager()

def format_question_text(question, state, result=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ –±–µ–∑"""
    difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}
    emoji = difficulty_emoji.get(question["difficulty"], "‚ö™")
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    if result is not None:
        text += f"\n{result}"
    else:
        text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å <b>{question['time_limit']}</b> —Å–µ–∫—É–Ω–¥!"
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–∏–≤–µ—Ç, {user.first_name}!",
        reply_markup=get_main_keyboard()
    )

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="quiz_menu")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤", callback_data="dictionary")],
        [InlineKeyboardButton("üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π", callback_data="course")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    text = "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    keyboard = [
        [InlineKeyboardButton("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_quick")],
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_hard")],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–∞–º", callback_data="mode_topics")],
        [InlineKeyboardButton("üîÄ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="mode_single")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def show_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    topics = sorted(set(q["topic"] for q in quiz_questions))
    
    keyboard = []
    for i, topic in enumerate(topics, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {topic}", callback_data=f"topic_{topic}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_quiz_menu")])
    
    await query.edit_message_text(
        text="üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str, difficulty: str = None, topic: str = None):
    """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    config = {
        "mode_quick": {"count": 5, "difficulty_filter": ["easy", "medium", "hard"]},
        "difficulty_easy": {"count": 10, "difficulty_filter": ["easy"]},
        "difficulty_medium": {"count": 15, "difficulty_filter": ["medium"]},
        "difficulty_hard": {"count": 20, "difficulty_filter": ["hard"]},
        "mode_topics": {"count": 15, "topic": topic},
        "mode_single": {"count": 1, "difficulty_filter": ["easy", "medium", "hard"]}
    }[mode]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    if "topic" in config:
        questions = [q for q in quiz_questions if q["topic"] == config["topic"]]
    else:
        questions = [q for q in quiz_questions if q["difficulty"] in config["difficulty_filter"]]
    
    if not questions:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {
        "mode": "quiz_session",
        "questions": random.sample(questions, min(len(questions), config["count"])),
        "current_index": 0,
        "correct_answers": 0,
        "start_time": time.time(),
        "answered": False
    }
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await ask_question(chat_id, context.bot)

async def ask_question(chat_id: int, bot):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if chat_id not in user_states:
        return
    
    state = user_states[chat_id]
    if state["current_index"] >= len(state["questions"]):
        await finish_quiz(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    state["current_question"] = question
    state["start_time"] = time.time()
    state["answered"] = False
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = format_question_text(question, state)
    
    keyboard = [[
        InlineKeyboardButton("–ê", callback_data="answer_A"),
        InlineKeyboardButton("–ë", callback_data="answer_B"),
        InlineKeyboardButton("–í", callback_data="answer_C")
    ]]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    message = await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    state["last_message_id"] = message.message_id
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    await timer_manager.set_timer(
        f"timeout_{chat_id}",
        question["time_limit"],
        handle_timeout,
        chat_id,
        bot
    )

async def handle_timeout(chat_id: int, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    question = state["current_question"]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if chat_id not in user_scores:
        user_scores[chat_id] = {"correct": 0, "total": 0, "name": "–ê–Ω–æ–Ω–∏–º"}
    
    user_scores[chat_id]["total"] += 1
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ
    result_text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    text = format_question_text(question, state, result=result_text)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=state["last_message_id"],
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await asyncio.sleep(2)
    await ask_question(chat_id, bot)

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    user_answer = query.data.replace("answer_", "")
    
    # –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if chat_id not in user_scores:
        user_scores[chat_id] = {"correct": 0, "total": 0, "name": query.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"}
    
    user_scores[chat_id]["total"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    question = state["current_question"]
    is_correct = user_answer == question["answer"]
    response_time = time.time() - state["start_time"]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_correct:
        state["correct_answers"] += 1
        user_scores[chat_id]["correct"] += 1
        message = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> üéâ"
        time_bonus = " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!" if response_time < question["time_limit"] / 2 else ""
        message += time_bonus
    else:
        message = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    
    message += f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.1f}—Å"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await query.edit_message_text(
        text=message,
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await asyncio.sleep(1.5)
    await ask_question(chat_id, context.bot)

async def finish_quiz(chat_id: int, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if chat_id not in user_states:
        return
    
    # –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    
    state = user_states[chat_id]
    score = user_scores.get(chat_id, {"correct": 0, "total": 0})
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    correct = state["correct_answers"]
    total = len(state["questions"])
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üèÅ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n\n"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 70:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 50:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    del user_states[chat_id]

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_scores:
        await query.edit_message_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    score = user_scores[chat_id]
    total = max(score["total"], 1)
    percentage = (score["correct"] / total) * 100
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üë§ –ò–º—è: {score.get('name', '–ê–Ω–æ–Ω–∏–º')}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n\n"
    )
    
    # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 70:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 50:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if not user_scores:
        await query.edit_message_text("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sorted_users = sorted(
        user_scores.values(),
        key=lambda x: (x["correct"] / max(x["total"], 1), x["correct"]),
        reverse=True
    )[:10]
    
    text = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
    for i, user in enumerate(sorted_users, 1):
        percentage = (user["correct"] / max(user["total"], 1)) * 100
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{medal} {user.get('name', '–ê–Ω–æ–Ω–∏–º')} - {percentage:.1f}%\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

async def back_to_quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    await quiz_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    chat_id = update.effective_chat.id
    # –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    if chat_id in user_states:
        del user_states[chat_id]
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(quiz_menu, pattern="^quiz_menu$"))
    app.add_handler(CallbackQueryHandler(show_topic_selection, pattern="^mode_topics$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(back_to_quiz_menu, pattern="^back_to_quiz_menu$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    quiz_modes = [
        "mode_quick", "difficulty_easy", "difficulty_medium", 
        "difficulty_hard", "mode_single"
    ]
    for mode in quiz_modes:
        app.add_handler(CallbackQueryHandler(
            lambda update, ctx, m=mode: start_quiz(update, ctx, m), 
            pattern=f"^{mode}$"
        ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    app.add_handler(CallbackQueryHandler(
        lambda update, ctx: start_quiz(
            update, 
            ctx, 
            "mode_topics", 
            topic=update.callback_query.data.replace("topic_", "")
        ),
        pattern="^topic_"
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(
        check_answer, 
        pattern="^answer_"
    ))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()