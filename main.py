import os
import logging
import asyncio
import random
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)

# ================== –õ–û–ì–ò ==================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================== –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==================
user_states = {}
user_scores = {}

# ================== –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –õ–ï–ö–¶–ò–ô ==================
def load_lectures_from_file(filename="lecture.txt"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    lectures_data = {}
    if not os.path.exists(filename):
        logger.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return lectures_data

    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()

    lecture_blocks = content.split("### –õ–ï–ö–¶–ò–Ø")
    for block in lecture_blocks:
        block = block.strip()
        if not block:
            continue

        lines = block.splitlines()
        try:
            header = lines[0].strip()
            lecture_id = int(header.split(".")[0])
            lecture_title = ".".join(header.split(".")[1:]).strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–µ–∫—Ü–∏–∏: {e}")
            continue

        sections = []
        section_title = None
        section_content = []

        for line in lines[1:]:
            if line.startswith("## "):
                if section_title:
                    sections.append({
                        "title": section_title,
                        "content": "\n".join(section_content).strip()
                    })
                    section_content = []
                section_title = line[3:].strip()
            else:
                section_content.append(line)

        if section_title:
            sections.append({
                "title": section_title,
                "content": "\n".join(section_content).strip()
            })

        lectures_data[lecture_id] = {
            "id": lecture_id,
            "title": lecture_title,
            "sections": sections
        }

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–µ–∫—Ü–∏–π: {len(lectures_data)}")
    return lectures_data

# ================== –ü–û–î–ì–†–£–ó–ö–ê –õ–ï–ö–¶–ò–ô ==================
lectures = load_lectures_from_file("lecture.txt")

# ================== –í–û–ü–†–û–°–´ –í–ò–ö–¢–û–†–ò–ù–´ (–ø—Ä–∏–º–µ—Ä) ==================
quiz_questions = [
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ë) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
]

# ================== –ú–ï–ù–ï–î–ñ–ï–† –¢–ê–ô–ú–ï–†–û–í ==================
class TimerManager:
    def __init__(self):
        self.timers = {}

    async def set_timer(self, key, delay, callback, *args):
        self.cancel_timer(key)
        task = asyncio.create_task(self._timer_task(key, delay, callback, args))
        self.timers[key] = task

    def cancel_timer(self, key):
        if key in self.timers:
            self.timers[key].cancel()
            del self.timers[key]

    async def _timer_task(self, key, delay, callback, args):
        try:
            await asyncio.sleep(delay)
            await callback(*args)
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
        finally:
            self.cancel_timer(key)

timer_manager = TimerManager()

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="quiz_menu")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [InlineKeyboardButton("üìö –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π", callback_data="lectures")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def format_question_text(question, state, result=None):
    difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}
    emoji = difficulty_emoji.get(question["difficulty"], "‚ö™")
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    if result:
        text += f"\n{result}"
    else:
        text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å <b>{question['time_limit']}</b> —Å–µ–∫—É–Ω–¥!"
    return text

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "üìö –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è",
        reply_markup=get_main_keyboard()
    )

async def show_lectures_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not lectures:
        await query.edit_message_text("‚ùå –õ–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=get_main_keyboard())
        return

    text = "üìö <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é:"
    keyboard = [[InlineKeyboardButton(f"üìñ {lec['title']}", callback_data=f"lecture_{lec_id}_0")]
                for lec_id, lec in lectures.items()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

async def show_lecture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, lecture_id, section_index = query.data.split("_")
    lecture_id, section_index = int(lecture_id), int(section_index)

    lecture = lectures.get(lecture_id)
    if not lecture:
        await query.edit_message_text("‚ùå –õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    section = lecture["sections"][section_index]
    text = (
        f"üìö <b>{lecture['title']}</b>\n\n"
        f"üîπ <b>{section['title']}</b>\n\n"
        f"{section['content']}\n\n"
        f"üìÑ –†–∞–∑–¥–µ–ª {section_index + 1}/{len(lecture['sections'])}"
    )

    buttons = []
    if section_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"lecture_{lecture_id}_{section_index - 1}"))
    if section_index < len(lecture["sections"]) - 1:
        buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"lecture_{lecture_id}_{section_index + 1}"))

    nav_buttons = [buttons] if buttons else []
    nav_buttons.append([InlineKeyboardButton("üìö –ö —Å–ø–∏—Å–∫—É –ª–µ–∫—Ü–∏–π", callback_data="lectures")])
    nav_buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(nav_buttons), parse_mode="HTML")

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
        "üìö –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π ‚Äî —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è ‚Äî —Ç–µ—Å—Ç—ã –ø–æ —Ç–µ–º–∞–º\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "üèÜ –†–µ–π—Ç–∏–Ω–≥ ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
    )
    await query.edit_message_text(text, reply_markup=get_main_keyboard(), parse_mode="HTML")

# ================== –ó–ê–ü–£–°–ö ==================
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(show_lectures_menu, pattern="^lectures$"))
    app.add_handler(CallbackQueryHandler(show_lecture, pattern=r"^lecture_\d+_\d+$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
