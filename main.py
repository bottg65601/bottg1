import os
import logging
import json
import random
import time
import threading
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# State management with cleanup
user_states = {}
user_scores = {}

# Quiz questions based on economic theory lectures - organized by topics
quiz_questions = [
    # –õ–µ–∫—Ü–∏—è 1: –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ë) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –Ω–∞—É–∫–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é", "–ë) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é", "–í) –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)
]

class TimerManager:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤"""
    def __init__(self):
        self.timers = {}
        self.lock = threading.Lock()
    
    def set_timer(self, key, delay, callback, *args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        with self.lock:
            # –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if key in self.timers:
                self.timers[key].cancel()
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            timer = threading.Timer(delay, self._timer_callback, args=(key, callback, args))
            timer.daemon = True
            self.timers[key] = timer
            timer.start()
    
    def cancel_timer(self, key):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        with self.lock:
            if key in self.timers:
                self.timers[key].cancel()
                del self.timers[key]
    
    def _timer_callback(self, key, callback, args):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π callback —Ç–∞–π–º–µ—Ä–∞"""
        try:
            callback(*args)
        except Exception as e:
            logger.error(f"Timer callback error: {e}")
        finally:
            with self.lock:
                if key in self.timers:
                    del self.timers[key]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤
timer_manager = TimerManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–∏–≤–µ—Ç, {user.first_name}!")
    await send_start(update, context)

async def send_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send start message"""
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
        f"üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        f"üéØ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏–∑—É—á–∞–π—Ç–µ –ø–æ —Ç–µ–º–∞–º\n"
        f"üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
        f"‚è∞ –û—Ç–≤–µ—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ - –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!\n\n"
        f"–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–ª–Ω–æ–º –∫—É—Ä—Å–µ –ª–µ–∫—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!"
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

def get_main_keyboard():
    """Get main keyboard markup"""
    keyboard = [
        [InlineKeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="quiz_menu")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤", callback_data="dictionary")],
        [InlineKeyboardButton("üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π", callback_data="course")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show quiz mode selection menu"""
    query = update.callback_query
    await query.answer()
    
    text = "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    keyboard = [
        [InlineKeyboardButton("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_quick")],
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_hard")],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–∞–º", callback_data="mode_topics")],
        [InlineKeyboardButton("üîÄ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="mode_single")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def show_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show topic selection menu"""
    query = update.callback_query
    await query.answer()
    
    text = "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n\n"
    
    topics = [
        "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã", 
        "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º",
        "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "–†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–ú–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"
    ]

    keyboard = []
    for i, topic in enumerate(topics):
        keyboard.append([InlineKeyboardButton(f"{i+1}. {topic}", callback_data=f"topic_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_quiz_menu")])
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def start_topic_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, topic_index: int):
    """Start quiz for specific topic"""
    query = update.callback_query
    await query.answer()
    
    topics = [
        "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã", 
        "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º",
        "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "–†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–ú–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"
    ]

    if topic_index >= len(topics):
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
        return

    selected_topic = topics[topic_index]
    topic_questions = [q for q in quiz_questions if q.get('topic') == selected_topic]
    
    if not topic_questions:
        await query.edit_message_text(
            text=f"‚ùå –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ '{selected_topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_main_keyboard()
        )
        return

    user_states[query.message.chat_id] = {
        'mode': 'quiz_session',
        'difficulty': 'topic',
        'questions_count': len(topic_questions),
        'current_question_num': 1,
        'session_correct': 0,
        'session_questions': [],
        'topic_questions': topic_questions,
        'topic_name': selected_topic,
        'answered': False,
        'last_activity': time.time()
    }

    await query.edit_message_text(
        text=f"üìö –¢–µ–º–∞: <b>{selected_topic}</b>\nüìù –í–æ–ø—Ä–æ—Å–æ–≤: {len(topic_questions)}\n\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ!",
        parse_mode="HTML"
    )

    # Schedule the first question
    timer_manager.set_timer(f"start_quiz_{query.message.chat_id}", 1.0, asyncio.run_coroutine_threadsafe, quiz_question_session(query.message.chat_id, context.bot))

async def quiz_question_session(chat_id: int, bot):
    """Send quiz question in session mode"""
    try:
        if chat_id not in user_states or user_states[chat_id]['mode'] != 'quiz_session':
            return

        session = user_states[chat_id]

        # Check if this is a topic-based quiz
        if 'topic_questions' in session:
            available_questions = session['topic_questions']
        else:
            available_questions = [q for q in quiz_questions if q['difficulty'] in session.get('difficulty_filter', ['easy', 'medium', 'hard'])]

        remaining_questions = [q for q in available_questions if q not in session['session_questions']]
        if not remaining_questions:
            remaining_questions = available_questions

        question = random.choice(remaining_questions)
        session['session_questions'].append(question)
        session['current_question'] = question
        session['start_time'] = time.time()
        session['answered'] = False
        session['last_activity'] = time.time()

        difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
        emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')

        topic_info = f"üìö {question.get('topic', '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è')}\n"

        text = (
            f"üéØ –í–æ–ø—Ä–æ—Å {session['current_question_num']}/{session['questions_count']} {emoji}\n"
            f"{topic_info}\n"
            f"üß† <b>{question['question']}</b>\n\n"
        )

        for option in question['options']:
            text += f"{option}\n"

        keyboard = [
            [
                InlineKeyboardButton("–ê", callback_data="quiz_–ê"),
                InlineKeyboardButton("–ë", callback_data="quiz_–ë"),
                InlineKeyboardButton("–í", callback_data="quiz_–í")
            ]
        ]

        text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å <b>{question['time_limit']}</b> —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!"

        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

        timer_manager.set_timer(
            f"quiz_{chat_id}", 
            question['time_limit'], 
            asyncio.run_coroutine_threadsafe, 
            _question_timer_callback(chat_id, bot)
        )
        
    except Exception as e:
        logger.error(f"Quiz question session error: {e}")

async def _question_timer_callback(chat_id: int, bot):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π callback —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        if chat_id not in user_states:
            return

        state = user_states[chat_id]
        if state.get('answered', False) or state.get('mode') not in ['quiz', 'quiz_session']:
            return

        state['answered'] = True
        question = state.get('current_question')
        if not question:
            return

        correct_answer = question['answer']

        if chat_id not in user_scores:
            user_scores[chat_id] = {
                'name': "–ê–Ω–æ–Ω–∏–º",
                'correct': 0,
                'incorrect': 0,
                'total': 0
            }

        if state.get('mode') == 'quiz_session':
            await _handle_session_timeout(chat_id, bot, correct_answer)
        else:
            await _handle_single_timeout(chat_id, bot, correct_answer)
            
    except Exception as e:
        logger.error(f"Timer callback error for chat {chat_id}: {e}")

async def _handle_session_timeout(chat_id: int, bot, correct_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Å—Å–∏–∏"""
    try:
        session = user_states[chat_id]
        user_scores[chat_id]['total'] += 1
        user_scores[chat_id]['incorrect'] += 1

        if session['current_question_num'] >= session['questions_count']:
            session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
            total_percentage = round((user_scores[chat_id]['correct'] / user_scores[chat_id]['total']) * 100, 1)

            text = (
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
                f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['session_correct']}/{session['questions_count']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç: {session_percentage}%\n\n"
                f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_scores[chat_id]['correct']}\n"
                f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%"
            )
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            if chat_id in user_states:
                del user_states[chat_id]
        else:
            session['current_question_num'] += 1
            text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
            await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")

            timer_manager.set_timer(
                f"next_question_{chat_id}", 
                2.0, 
                asyncio.run_coroutine_threadsafe, 
                quiz_question_session(chat_id, bot)
            )
            
    except Exception as e:
        logger.error(f"Session timeout error: {e}")

async def _handle_single_timeout(chat_id: int, bot, correct_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        user_scores[chat_id]['total'] += 1
        user_scores[chat_id]['incorrect'] += 1

        score = user_scores[chat_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)

        text = (
            f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )

        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        if chat_id in user_states:
            del user_states[chat_id]
            
    except Exception as e:
        logger.error(f"Single timeout error: {e}")

async def check_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check quiz answer with improved validation"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    user_answer = query.data.replace("quiz_", "")
    username = query.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"

    try:
        if chat_id not in user_states or user_states[chat_id].get('mode') not in ['quiz', 'quiz_session']:
            return False

        if user_states[chat_id].get('answered', False):
            return False

        timer_manager.cancel_timer(f"quiz_{chat_id}")
        user_states[chat_id]['answered'] = True
        user_states[chat_id]['last_activity'] = time.time()

        start_time = user_states[chat_id].get('start_time', 0)
        current_time = time.time()
        response_time = round(current_time - start_time, 1) if start_time else 0

        if user_states[chat_id].get('mode') == 'quiz_session':
            await _handle_session_quiz_answer(chat_id, context.bot, username, user_answer, response_time)
        else:
            await _handle_single_quiz_answer(chat_id, context.bot, username, user_answer, response_time)
            
    except Exception as e:
        logger.error(f"Quiz answer error for chat {chat_id}: {e}")
        return False

async def _handle_single_quiz_answer(chat_id: int, bot, username: str, user_answer: str, response_time: float):
    """Handle single quiz question answer"""
    try:
        if chat_id not in user_scores:
            user_scores[chat_id] = {
                'name': username or "–ê–Ω–æ–Ω–∏–º",
                'correct': 0,
                'incorrect': 0,
                'total': 0
            }

        correct_answer = user_states[chat_id]['current_question']['answer']
        user_answer = user_answer.upper().strip()
        difficulty = user_states[chat_id]['current_question']['difficulty']
        time_limit = user_states[chat_id]['current_question']['time_limit']
        topic = user_states[chat_id]['current_question'].get('topic', '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è')

        time_bonus = ""
        if response_time <= time_limit * 0.5:
            time_bonus = " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!"
        elif response_time <= time_limit * 0.75:
            time_bonus = " üëç –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!"

        user_scores[chat_id]['total'] += 1

        difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
        emoji = difficulty_emoji.get(difficulty, '‚ö™')

        if user_answer == correct_answer:
            user_scores[chat_id]['correct'] += 1
            score = user_scores[chat_id]
            percentage = round((score['correct'] / score['total']) * 100, 1)

            text = (
                f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> {emoji}{time_bonus} üéâ\n"
                f"üìö –¢–µ–º–∞: {topic}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
            )
        else:
            user_scores[chat_id]['incorrect'] += 1
            score = user_scores[chat_id]
            percentage = round((score['correct'] / score['total']) * 100, 1)

            text = (
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n"
                f"üìö –¢–µ–º–∞: {topic}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
            )

        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        if chat_id in user_states:
            del user_states[chat_id]
        return True
        
    except Exception as e:
        logger.error(f"Single quiz answer error: {e}")
        return False

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user statistics"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    if chat_id not in user_scores:
        await query.edit_message_text(
            text="üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
            reply_markup=get_main_keyboard()
        )
        return

    score = user_scores[chat_id]
    percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)

    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë§ –ò–º—è: {score['name']}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['incorrect']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%\n\n"
    )

    if percentage >= 90:
        stats_text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 75:
        stats_text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 60:
        stats_text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –•–æ—Ä–æ—à–∏–π</b>"
    elif percentage >= 40:
        stats_text += "ü•â <b>–£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π</b>"
    else:
        stats_text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"

    await query.edit_message_text(
        text=stats_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show leaderboard"""
    query = update.callback_query
    await query.answer()
    
    if not user_scores:
        await query.edit_message_text(
            text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!",
            reply_markup=get_main_keyboard()
        )
        return

    sorted_users = sorted(
        user_scores.items(),
        key=lambda x: (x[1]['correct'] / max(x[1]['total'], 1), x[1]['correct']),
        reverse=True
    )

    text = "üèÜ <b>–¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (user_id, score) in enumerate(sorted_users[:10], 1):
        percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{medal} {score['name']} - {percentage}% ({score['correct']}/{score['total']})\n"

    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show economics dictionary"""
    query = update.callback_query
    await query.answer()
    
    text = "üìö <b>–°–ª–æ–≤–∞—Ä—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:</b>\n\n"
    dictionary = {
        "–≠–∫–æ–Ω–æ–º–∏–∫–∞": "–°—Ñ–µ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –±–ª–∞–≥ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ª—é–¥–µ–π",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ã (–∑–µ–º–ª—è, —Ç—Ä—É–¥, –∫–∞–ø–∏—Ç–∞–ª)",
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã)
    }

    for term, definition in dictionary.items():
        text += f"üìå <b>{term}</b>\n{definition}\n\n"

    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show course menu with lecture selection"""
    query = update.callback_query
    await query.answer()
    
    text = "üìö <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üìñ –õ–µ–∫—Ü–∏—è 1: –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏", callback_data="lecture_1")],
        [InlineKeyboardButton("üìñ –õ–µ–∫—Ü–∏—è 2: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã", callback_data="lecture_2")],
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–µ–∫—Ü–∏–∏)
        [InlineKeyboardButton("üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞", callback_data="course_content")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send help message"""
    query = update.callback_query
    await query.answer()
    
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏\n"
        "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥</b> - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üìö <b>–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è\n"
        "üìí <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π</b> - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –ê, –ë –∏–ª–∏ –í\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–∞–π–º–µ—Ä–æ–º - —É –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å"
    )
    await query.edit_message_text(
        text=help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return to main menu"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

async def back_to_quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return to quiz menu"""
    query = update.callback_query
    await query.answer()
    
    await quiz_menu(update, context)

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(quiz_menu, pattern="^quiz_menu$"))
    app.add_handler(CallbackQueryHandler(show_topic_selection, pattern="^mode_topics$"))
    app.add_handler(CallbackQueryHandler(start_topic_quiz, pattern="^topic_"))
    app.add_handler(CallbackQueryHandler(check_quiz_answer, pattern="^quiz_"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$"))
    app.add_handler(CallbackQueryHandler(show_dictionary, pattern="^dictionary$"))
    app.add_handler(CallbackQueryHandler(show_course, pattern="^course$"))
    app.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(back_to_quiz_menu, pattern="^back_to_quiz_menu$"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()