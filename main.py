import os
import logging
import asyncio
import random
import time
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# State management
user_states = {}
user_scores = {}

# Quiz questions based on economic theory lectures - organized by topics
quiz_questions = [
    # –õ–µ–∫—Ü–∏—è 1: –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ë) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 15,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –Ω–∞—É–∫–∞?",
        "options": ["–ê) –¢–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é", "–ë) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é", "–í) –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é"],
        "answer": "–í",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
]

# Dictionary of economic terms
economics_dictionary = {
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞": "–°—Ñ–µ—Ä–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –±–ª–∞–≥ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ª—é–¥–µ–π",
    "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ã (–∑–µ–º–ª—è, —Ç—Ä—É–¥, –∫–∞–ø–∏—Ç–∞–ª)",
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
}

# Economic formulas
economic_formulas = {
    "–¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏": "((–ò–ü–¶_—Ç–µ–∫—É—â–∏–π - –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) / –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) √ó 100%",
    "–†–µ–∞–ª—å–Ω—ã–π –í–í–ü": "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π –í–í–ü / –î–µ—Ñ–ª—è—Ç–æ—Ä –í–í–ü √ó 100",
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
}

# Useful links
useful_links = {
    "üìà –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§": "https://cbr.ru - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –¶–ë –†–§",
    "üìä –†–æ—Å—Å—Ç–∞—Ç": "https://rosstat.gov.ru - –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
}

# News sources
news_sources = {
    "üì∞ –†–ë–ö –≠–∫–æ–Ω–æ–º–∏–∫–∞": "https://rbc.ru/economics - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
    "üíº –í–µ–¥–æ–º–æ—Å—Ç–∏": "https://vedomosti.ru - –î–µ–ª–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
}

# Presentation topics
presentation_topics = [
    "üìä –ú–µ—Ç–æ–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
    "üîÑ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤",
    # ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
]

class TimerManager:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤"""
    def __init__(self):
        self.timers = {}
    
    async def set_timer(self, key, delay, callback, *args):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        self.cancel_timer(key)
        task = asyncio.create_task(self._timer_task(key, delay, callback, args))
        self.timers[key] = task
    
    def cancel_timer(self, key):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
        if key in self.timers:
            self.timers[key].cancel()
            del self.timers[key]
    
    async def _timer_task(self, key, delay, callback, args):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞"""
        try:
            await asyncio.sleep(delay)
            await callback(*args)
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"Timer error: {e}")
        finally:
            self.cancel_timer(key)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤
timer_manager = TimerManager()

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="quiz_menu")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [InlineKeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤", callback_data="dictionary")],
        [InlineKeyboardButton("üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="useful_links")],
        [InlineKeyboardButton("üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π", callback_data="lectures")],
        [InlineKeyboardButton("üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤", callback_data="presentation_topics")],
        [InlineKeyboardButton("üìê –§–æ—Ä–º—É–ª—ã", callback_data="formulas")],
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
        "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "üéØ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏–∑—É—á–∞–π—Ç–µ –ø–æ —Ç–µ–º–∞–º\n"
        "üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
        "‚è∞ –û—Ç–≤–µ—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ - –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!\n\n"
        "–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–ª–Ω–æ–º –∫—É—Ä—Å–µ –ª–µ–∫—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!",
        reply_markup=get_main_keyboard()
    )

async def quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    text = "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    keyboard = [
        [InlineKeyboardButton("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_quick")],
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_hard")],
        [InlineKeyboardButton("üèÜ –≠–∫—Å–ø–µ—Ä—Ç (–≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã)", callback_data="difficulty_expert")],
        [InlineKeyboardButton("üìö –ü–æ —Ç–µ–º–∞–º", callback_data="mode_topics")],
        [InlineKeyboardButton("üîÄ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="mode_single")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def show_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    topics = [
        "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã", 
        "–†—ã–Ω–æ–∫ –∏ —Ä—ã–Ω–æ—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º",
        "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "–†—ã–Ω–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –∏ —Ü–∏–∫–ª—ã",
        "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "–ú–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"
    ]
    
    keyboard = []
    for i, topic in enumerate(topics, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {topic}", callback_data=f"topic_{i-1}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_quiz_menu")])
    
    await query.edit_message_text(
        text="üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str, difficulty: str = None, topic: str = None):
    """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if mode == "mode_quick":
        config = {"count": 5, "difficulty_filter": ["easy", "medium", "hard"]}
    elif mode == "difficulty_easy":
        config = {"count": 10, "difficulty_filter": ["easy"]}
    elif mode == "difficulty_medium":
        config = {"count": 15, "difficulty_filter": ["medium"]}
    elif mode == "difficulty_hard":
        config = {"count": 20, "difficulty_filter": ["hard"]}
    elif mode == "difficulty_expert":
        config = {"count": len(quiz_questions), "difficulty_filter": ["easy", "medium", "hard"]}
    elif mode == "mode_topics":
        topics = [
            "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏",
            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            # ... (–≤—Å–µ —Ç–µ–º—ã)
        ]
        selected_topic = topics[int(topic)]
        config = {"count": len([q for q in quiz_questions if q["topic"] == selected_topic]), "topic": selected_topic}
    elif mode == "mode_single":
        config = {"count": 1, "difficulty_filter": ["easy", "medium", "hard"]}
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    if "topic" in config:
        questions = [q for q in quiz_questions if q["topic"] == config["topic"]]
    else:
        questions = [q for q in quiz_questions if q["difficulty"] in config["difficulty_filter"]]
    
    if not questions:
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {
        "mode": "quiz_session",
        "questions": random.sample(questions, min(len(questions), config["count"])),
        "current_index": 0,
        "correct_answers": 0,
        "start_time": time.time(),
        "answered": False
    }
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await ask_question(chat_id, context.bot)

async def ask_question(chat_id: int, bot):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if chat_id not in user_states:
        return
    
    state = user_states[chat_id]
    if state["current_index"] >= len(state["questions"]):
        await finish_quiz(chat_id, bot)
        return
    
    question = state["questions"][state["current_index"]]
    state["current_question"] = question
    state["start_time"] = time.time()
    state["answered"] = False
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
    emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')
    
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å <b>{question['time_limit']}</b> —Å–µ–∫—É–Ω–¥!"
    
    keyboard = [[
        InlineKeyboardButton("–ê", callback_data="answer_A"),
        InlineKeyboardButton("–ë", callback_data="answer_B"),
        InlineKeyboardButton("–í", callback_data="answer_C")
    ]]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    message = await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    state["last_message_id"] = message.message_id
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    await timer_manager.set_timer(
        f"timeout_{chat_id}",
        question["time_limit"],
        handle_timeout,
        chat_id,
        bot
    )

async def handle_timeout(chat_id: int, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    question = state["current_question"]
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if chat_id not in user_scores:
        user_scores[chat_id] = {"correct": 0, "total": 0, "name": "–ê–Ω–æ–Ω–∏–º"}
    
    user_scores[chat_id]["total"] += 1
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ
    result_text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    
    difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
    emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')
    
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    text += f"\n{result_text}"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=state["last_message_id"],
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await asyncio.sleep(2)
    await ask_question(chat_id, bot)

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_states or user_states[chat_id].get("answered"):
        return
    
    state = user_states[chat_id]
    state["answered"] = True
    user_answer = query.data.replace("answer_", "")
    
    # –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if chat_id not in user_scores:
        user_scores[chat_id] = {
            "correct": 0, 
            "total": 0, 
            "name": query.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
        }
    
    user_scores[chat_id]["total"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    question = state["current_question"]
    is_correct = user_answer == question["answer"]
    response_time = time.time() - state["start_time"]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
    emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')
    
    if is_correct:
        state["correct_answers"] += 1
        user_scores[chat_id]["correct"] += 1
        message = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> üéâ"
        if response_time <= question["time_limit"] * 0.5:
            message += " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!"
        elif response_time <= question["time_limit"] * 0.75:
            message += " üëç –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!"
    else:
        message = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>"
    
    message += f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.1f}—Å –∏–∑ {question['time_limit']}—Å"
    
    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {state['current_index'] + 1}/{len(state['questions'])} {emoji}\n"
        f"üìö –¢–µ–º–∞: {question['topic']}\n\n"
        f"üß† <b>{question['question']}</b>\n\n"
    )
    for option in question["options"]:
        text += f"{option}\n"
    text += f"\n{message}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try:
        await query.edit_message_text(
            text=text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state["current_index"] += 1
    await asyncio.sleep(1.5)
    await ask_question(chat_id, context.bot)

async def finish_quiz(chat_id: int, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if chat_id not in user_states:
        return
    
    # –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    
    state = user_states[chat_id]
    score = user_scores.get(chat_id, {"correct": 0, "total": 0})
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    correct = state["correct_answers"]
    total = len(state["questions"])
    percentage = (correct / total) * 100 if total > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üèÅ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n\n"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 80:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 60:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –•–æ—Ä–æ—à–∏–π</b>"
    elif percentage >= 40:
        text += "ü•â <b>–£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    del user_states[chat_id]

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if chat_id not in user_scores:
        await query.edit_message_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
            reply_markup=get_main_keyboard()
        )
        return
    
    score = user_scores[chat_id]
    total = max(score["total"], 1)
    percentage = (score["correct"] / total) * 100
    
    text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë§ –ò–º—è: {score.get('name', '–ê–Ω–æ–Ω–∏–º')}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['total'] - score['correct']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n\n"
    )
    
    # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è
    if percentage >= 90:
        text += "üèÜ <b>–£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!</b>"
    elif percentage >= 75:
        text += "ü•á <b>–£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b>"
    elif percentage >= 60:
        text += "ü•à <b>–£—Ä–æ–≤–µ–Ω—å: –•–æ—Ä–æ—à–∏–π</b>"
    elif percentage >= 40:
        text += "ü•â <b>–£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π</b>"
    else:
        text += "üìö <b>–£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π</b>"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if not user_scores:
        await query.edit_message_text(
            "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sorted_users = sorted(
        user_scores.items(),
        key=lambda x: (x[1]["correct"] / max(x[1]["total"], 1), x[1]["correct"]),
        reverse=True
    )[:10]
    
    text = "üèÜ <b>–¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (user_id, user) in enumerate(sorted_users, 1):
        percentage = (user["correct"] / max(user["total"], 1)) * 100
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{medal} {user.get('name', '–ê–Ω–æ–Ω–∏–º')} - {percentage:.1f}% ({user['correct']}/{user['total']})\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    text = "üìö <b>–°–ª–æ–≤–∞—Ä—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:</b>\n\n"
    for term, definition in economics_dictionary.items():
        text += f"üìå <b>{term}</b>\n{definition}\n\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_useful_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    text = "üìà <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:</b>\n\n"
    for name, link in useful_links.items():
        text += f"{name}\n{link}\n\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_formulas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã"""
    query = update.callback_query
    await query.answer()
    
    text = "üìê <b>–û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:</b>\n\n"
    for formula_name, formula in economic_formulas.items():
        text += f"üîπ <b>{formula_name}</b>\n<code>{formula}</code>\n\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_presentation_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    text = "üìù <b>–¢–µ–º—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏:</b>\n\n"
    for i, topic in enumerate(presentation_topics, 1):
        text += f"{i}. {topic}\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    text = "üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
    text += "üî∏ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
    for name, link in list(news_sources.items())[:4]:
        text += f"‚Ä¢ {name}\n{link}\n"
    
    text += "\nüî∏ <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
    for name, link in list(news_sources.items())[4:]:
        text += f"‚Ä¢ {name}\n{link}\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏:\n"
        "  ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        "  ‚Ä¢ –ü–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (10-20 –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
        "  ‚Ä¢ –ü–æ —Ç–µ–º–∞–º –ª–µ–∫—Ü–∏–π\n"
        "  ‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥</b> - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üìö <b>–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è\n"
        "üìà <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</b> - –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ\n"
        "üìí <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π</b> - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "üìΩÔ∏è <b>–¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤</b> - –∏–¥–µ–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–∞–±–æ—Ç\n"
        "üìê <b>–§–æ—Ä–º—É–ª—ã</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã\n"
        "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
        "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b> - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å\n"
        "/quiz - –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
    )
    
    await query.edit_message_text(
        text=text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

async def back_to_quiz_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    await quiz_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    chat_id = update.effective_chat.id
    # –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
    timer_manager.cancel_timer(f"timeout_{chat_id}")
    if chat_id in user_states:
        del user_states[chat_id]
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("help", show_help))
    app.add_handler(CommandHandler("quiz", quiz_menu))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(quiz_menu, pattern="^quiz_menu$"))
    app.add_handler(CallbackQueryHandler(show_topic_selection, pattern="^mode_topics$"))
    app.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    app.add_handler(CallbackQueryHandler(show_leaderboard, pattern="^leaderboard$"))
    app.add_handler(CallbackQueryHandler(show_dictionary, pattern="^dictionary$"))
    app.add_handler(CallbackQueryHandler(show_useful_links, pattern="^useful_links$"))
    app.add_handler(CallbackQueryHandler(show_formulas, pattern="^formulas$"))
    app.add_handler(CallbackQueryHandler(show_presentation_topics, pattern="^presentation_topics$"))
    app.add_handler(CallbackQueryHandler(show_news, pattern="^news$"))
    app.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    app.add_handler(CallbackQueryHandler(back_to_quiz_menu, pattern="^back_to_quiz_menu$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quiz_modes = [
        "mode_quick", "difficulty_easy", "difficulty_medium", 
        "difficulty_hard", "difficulty_expert", "mode_single"
    ]
    for mode in quiz_modes:
        app.add_handler(CallbackQueryHandler(
            lambda update, ctx, m=mode: start_quiz(update, ctx, m), 
            pattern=f"^{m}$"
        ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    app.add_handler(CallbackQueryHandler(
        lambda update, ctx: start_quiz(
            update, 
            ctx, 
            "mode_topics", 
            topic=update.callback_query.data.replace("topic_", "")
        ),
        pattern="^topic_"
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(
        check_answer, 
        pattern="^answer_"
    ))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()