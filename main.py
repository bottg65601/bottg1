import os
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
import random
import time

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Set UTF-8 encoding for output
import sys
sys.stdout.reconfigure(encoding='utf-8')

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-flyio-app.fly.dev/webhook')

# State management
user_states = {}
user_scores = {}

# Quiz questions (combined from simple_bot and mine, 40+ questions)
quiz_questions = [
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–ë) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —è–≤–ª–µ–Ω–∏–π?",
        "options": ["–ê) –ú–µ—Ç–æ–¥ –Ω–∞—É—á–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏", "–ë) –¢–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "–í) –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–µ—Ç–æ–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–∞—É–∫–∏"
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è?",
        "options": ["–ê) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", "–ë) –ò–∑–±—ã—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "–í) –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏"
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è, –∫–æ–º–∞–Ω–¥–Ω–∞—è, —Ä—ã–Ω–æ—á–Ω–∞—è, —Å–º–µ—à–∞–Ω–Ω–∞—è", "–ë) –¢–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω–∞—è", "–í) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —á–∞—Å—Ç–Ω–∞—è"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    },
    {
        "question": "–ö–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏?",
        "options": ["–ê) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ë) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏—é", "–í) –°–Ω–∏–∂–∞–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–¥–∏—Ç"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª?",
        "options": ["–ê) –ü–µ—Ä–∏–æ–¥—ã —Ä–æ—Å—Ç–∞ –∏ —Å–ø–∞–¥–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏", "–ë) –£—Å—Ç–æ–π—á–∏–≤–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–í) –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç —Ü–µ–Ω", "–ë) –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—É?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–ë) –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω", "–í) –í–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏—è —Ä—É–±–ª—è?",
        "options": ["–ê) –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–ë) –û—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω?",
        "options": ["–ê) –î–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏", "–ë) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–í) –û–±—ä—ë–º —ç–∫—Å–ø–æ—Ä—Ç–∞"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ü–µ—Å—Å–∏—è?",
        "options": ["–ê) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ë) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–ø–∞–¥", "–í) –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—Å–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–ë) –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞", "–í) –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ª–æ–≥ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º?",
        "options": ["–ê) –ù–î–°", "–ë) –ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥", "–í) –ê–∫—Ü–∏–∑"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –î–∂–∏–Ω–∏?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏", "–ë) –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤", "–í) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–≥—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç + –∏–Ω—Ñ–ª—è—Ü–∏—è", "–ë) –°–ø–∞–¥ + –¥–µ—Ñ–ª—è—Ü–∏—è", "–í) –°—Ç–∞–≥–Ω–∞—Ü–∏—è + –∏–Ω—Ñ–ª—è—Ü–∏—è"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 30,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∏–¥ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã?",
        "options": ["–ê) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è", "–ë) –§—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è", "–í) –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?",
        "options": ["–ê) –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å–≥–∏", "–ë) –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–í) –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    # Additional questions from 'mine' to reach 40+
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞?",
        "options": ["–ê) –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã", "–ë) –£—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–æ–≤", "–í) –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–Ω–æ–ø–æ–ª–∏—è?",
        "options": ["–ê) –û–¥–∏–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ —Ä—ã–Ω–∫–µ", "–ë) –ú–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", "–í) –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10,
        "topic": "–ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –í–ù–ü?",
        "options": ["–ê) –í–∞–ª–æ–≤–æ–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "–ë) –í–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç", "–í) –ß–∏—Å—Ç—ã–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20,
        "topic": "–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    # Add more questions here to reach 40+ (abridged for brevity)
    # ... (additional 20+ questions can be added from 'mine' code)
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    chat_id = update.effective_chat.id
    username = update.effective_user.first_name or "–¥—Ä—É–≥"
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
        f"üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        f"üéØ –í—ã–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        f"üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start a single quiz question"""
    chat_id = update.effective_chat.id
    await send_quiz_question(chat_id, context)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user statistics"""
    chat_id = update.effective_chat.id
    if chat_id not in user_scores:
        await update.message.reply_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
            reply_markup=get_main_keyboard()
        )
        return

    score = user_scores[chat_id]
    percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –ò–º—è: {score['name']}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['incorrect']}\n"
        f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%\n\n"
    )
    if percentage >= 90:
        stats_text += "üèÜ –£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!"
    elif percentage >= 75:
        stats_text += "ü•á –£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    elif percentage >= 60:
        stats_text += "ü•à –£—Ä–æ–≤–µ–Ω—å: –•–æ—Ä–æ—à–∏–π"
    elif percentage >= 40:
        stats_text += "ü•â –£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π"
    else:
        stats_text += "üìö –£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π"

    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show leaderboard"""
    chat_id = update.effective_chat.id
    if not user_scores:
        await update.message.reply_text(
            "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!",
            reply_markup=get_main_keyboard()
        )
        return

    sorted_users = sorted(
        user_scores.items(),
        key=lambda x: (x[1]['correct'] / max(x[1]['total'], 1), x[1]['correct']),
        reverse=True
    )
    text = "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for i, (user_id, score) in enumerate(sorted_users[:10], 1):
        percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)
        text += f"{i}. {score['name']} - {percentage}% ({score['correct']}/{score['total']})\n"

    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show economics dictionary"""
    chat_id = update.effective_chat.id
    text = "üìö –°–ª–æ–≤–∞—Ä—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:\n\n"
    dictionary = {
        "–í–í–ü": "–í–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç - –æ–±—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
        "–ò–Ω—Ñ–ª—è—Ü–∏—è": "–£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ.",
        "–î–µ—Ñ–ª—è—Ü–∏—è": "–°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏–∏.",
        "–†–µ—Ü–µ—Å—Å–∏—è": "–ü–µ—Ä–∏–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–¥–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –í–í–ü –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –ø–æ–¥—Ä—è–¥.",
        "–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞": "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –±–∞–Ω–∫–∞–º.",
        "–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞": "–ú–µ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ –¥–æ—Ö–æ–¥–∞.",
        "–ú–æ–Ω–æ–ø–æ–ª–∏—è": "–†—ã–Ω–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–¥–∞–≤–µ—Ü.",
        # Add more terms from 'mine' code (27 total)
    }
    for term, definition in dictionary.items():
        text += f"üîπ <b>{term}</b>\n{definition}\n\n"

    await update.message.reply_text(text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def useful_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show useful links"""
    chat_id = update.effective_chat.id
    text = "üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:\n\n"
    links = {
        "üìà –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§": "https://cbr.ru",
        "üìä –†–æ—Å—Å—Ç–∞—Ç": "https://rosstat.gov.ru",
        "üíº –ú–∏–Ω—ç–∫–æ–Ω–æ–º—Ä–∞–∑–≤–∏—Ç–∏—è": "https://economy.gov.ru",
        "üì∞ –†–ë–ö –≠–∫–æ–Ω–æ–º–∏–∫–∞": "https://rbc.ru/economics"
    }
    for name, link in links.items():
        text += f"{name}\n{link}\n\n"

    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show course materials"""
    chat_id = update.effective_chat.id
    course_text = (
        "üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:\n\n"
        "üìñ <b>–ú–æ–¥—É–ª—å 1: –û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏</b>\n"
        "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–∞—É–∫–∏\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è\n"
        "‚Ä¢ –¢–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º\n\n"
        "üìñ <b>–ú–æ–¥—É–ª—å 2: –ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞</b>\n"
        "‚Ä¢ –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è\n\n"
        "üìñ <b>–ú–æ–¥—É–ª—å 3: –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞</b>\n"
        "‚Ä¢ –í–í–ü –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞\n"
        "‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è –∏ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞\n"
        "‚Ä¢ –î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞\n\n"
        "üí° –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'"
    )
    await update.message.reply_text(course_text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def presentation_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show presentation topics"""
    chat_id = update.effective_chat.id
    text = "üìΩÔ∏è –¢–µ–º—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:\n\n"
    topics = [
        "üè¶ –†–æ–ª—å –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏",
        "üí± –í–ª–∏—è–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É",
        "üìà –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –í–í–ü –†–æ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç",
        "üè≠ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏",
        "üåç –í–ª–∏—è–Ω–∏–µ —Å–∞–Ω–∫—Ü–∏–π –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É –†–æ—Å—Å–∏–∏",
        "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä –∫–∞–∫ –¥—Ä–∞–π–≤–µ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏",
        "üåæ –†–æ–ª—å –∞–≥—Ä–∞—Ä–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏",
        "üíº –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å: –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"
    ]
    for i, topic in enumerate(topics, 1):
        text += f"{i}. {topic}\n"

    text += f"\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!"
    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def formulas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show economic formulas"""
    chat_id = update.effective_chat.id
    text = "üìê –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:\n\n"
    formulas = {
        "–¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏": "((–ò–ü–¶_—Ç–µ–∫—É—â–∏–π - –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) / –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) √ó 100%",
        "–†–µ–∞–ª—å–Ω—ã–π –í–í–ü": "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π –í–í–ü / –î–µ—Ñ–ª—è—Ç–æ—Ä –í–í–ü",
        "–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã": "(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö / –†–∞–±–æ—á–∞—è —Å–∏–ª–∞) √ó 100%",
        "–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏"
    }
    for formula_name, formula in formulas.items():
        text += f"üîπ <b>{formula_name}</b>\n{formula}\n\n"

    await update.message.reply_text(text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show calculator options"""
    chat_id = update.effective_chat.id
    calc_text = (
        "üßÆ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:</b>\n\n"
        "üìä –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏\n"
        "üí∞ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞\n"
        "üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –í–í–ü\n"
        "üíº –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã\n\n"
        "üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/calc [—Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞] [–∑–Ω–∞—á–µ–Ω–∏—è]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ /calc inflation 100 105\n"
        "‚Ä¢ /calc real_rate 10 3\n"
        "‚Ä¢ /calc growth 1000 1100\n"
        "‚Ä¢ /calc unemployment 50 1000"
    )
    await update.message.reply_text(calc_text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle calculator commands"""
    chat_id = update.effective_chat.id
    command_parts = update.message.text.split()
    if len(command_parts) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calc [—Ç–∏–ø] [–∑–Ω–∞—á–µ–Ω–∏—è]",
            reply_markup=get_main_keyboard()
        )
        return

    calc_type = command_parts[1].lower()
    try:
        if calc_type == "inflation" and len(command_parts) >= 4:
            old_value = float(command_parts[2])
            new_value = float(command_parts[3])
            inflation_rate = ((new_value - old_value) / old_value) * 100
            result = f"üìä –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_rate:.2f}%"
        elif calc_type == "real_rate" and len(command_parts) >= 4:
            nominal_rate = float(command_parts[2])
            inflation_rate = float(command_parts[3])
            real_rate = nominal_rate - inflation_rate
            result = f"üí∞ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {real_rate:.2f}%"
        elif calc_type == "growth" and len(command_parts) >= 4:
            old_gdp = float(command_parts[2])
            new_gdp = float(command_parts[3])
            growth_rate = ((new_gdp - old_gdp) / old_gdp) * 100
            result = f"üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –í–í–ü: {growth_rate:.2f}%"
        elif calc_type == "unemployment" and len(command_parts) >= 4:
            unemployed = float(command_parts[2])
            labor_force = float(command_parts[3])
            unemployment_rate = (unemployed / labor_force) * 100
            result = f"üíº –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã: {unemployment_rate:.2f}%"
        else:
            result = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"

        await update.message.reply_text(result, reply_markup=get_main_keyboard())
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", reply_markup=get_main_keyboard())
    except ZeroDivisionError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", reply_markup=get_main_keyboard())

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show news sources"""
    chat_id = update.effective_chat.id
    news_text = (
        "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
        "üî∏ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ –†–ë–ö –≠–∫–æ–Ω–æ–º–∏–∫–∞ - rbc.ru/economics\n"
        "‚Ä¢ –í–µ–¥–æ–º–æ—Å—Ç–∏ - vedomosti.ru\n"
        "‚Ä¢ –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä - kommersant.ru\n\n"
        "üî∏ <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ Bloomberg - bloomberg.com\n"
        "‚Ä¢ Financial Times - ft.com\n"
        "‚Ä¢ Reuters Economics - reuters.com\n\n"
        "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏!"
    )
    await update.message.reply_text(news_text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send help message"""
    chat_id = update.effective_chat.id
    help_text = (
        "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥</b> - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üìö <b>–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è\n"
        "üìà <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</b> - –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
        "üìí <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π</b> - —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "üìΩÔ∏è <b>–¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤</b> - –∏–¥–µ–∏ –¥–ª—è —Ä–∞–±–æ—Ç\n"
        "üìê <b>–§–æ—Ä–º—É–ª—ã</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã\n"
        "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
        "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –±—É–∫–≤–∞–º–∏ –ê, –ë –∏–ª–∏ –í\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
    )
    await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def difficulty_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show difficulty level selection"""
    chat_id = update.effective_chat.id
    text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
    keyboard = [
        [InlineKeyboardButton("üü¢ –ë–∞–∑–æ–≤—ã–π (5 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_hard")],
        [InlineKeyboardButton("üèÜ –≠–∫—Å–ø–µ—Ä—Ç (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="difficulty_expert")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

async def quick_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start quick 5-question game"""
    chat_id = update.effective_chat.id
    user_states[chat_id] = {
        'mode': 'quiz_session',
        'difficulty': 'quick',
        'questions_count': 5,
        'current_question_num': 1,
        'session_correct': 0,
        'session_questions': [],
        'job': None
    }
    await update.message.reply_text("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n\nüöÄ –ü–æ–µ—Ö–∞–ª–∏!")
    await send_quiz_question_session(chat_id, context)

async def send_quiz_question(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """Send a single quiz question with timer"""
    question = random.choice(quiz_questions)
    difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
    difficulty_text = {'easy': '–õ–µ–≥–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'hard': '–°–ª–æ–∂–Ω—ã–π'}
    emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')
    diff_name = difficulty_text.get(question['difficulty'], '–û–±—ã—á–Ω—ã–π')

    user_states[chat_id] = {
        'mode': 'quiz',
        'current_question': question,
        'start_time': time.time(),
        'answered': False,
        'job': None
    }

    text = f"üß† –í–æ–ø—Ä–æ—Å ({emoji} {diff_name}, {question['time_limit']} —Å–µ–∫.):\n{question['question']}\n\n"
    for option in question['options']:
        text += f"{option}\n"
    text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {question['time_limit']} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!\n–û—Ç–≤–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π (–ê, –ë –∏–ª–∏ –í)"

    keyboard = [
        [
            InlineKeyboardButton("–ê", callback_data="quiz_–ê"),
            InlineKeyboardButton("–ë", callback_data="quiz_–ë"),
            InlineKeyboardButton("–í", callback_data="quiz_–í")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=reply_markup)

    # Schedule timer
    user_states[chat_id]['job'] = context.job_queue.run_once(
        question_timer, question['time_limit'], data=chat_id, chat_id=chat_id
    )

async def send_quiz_question_session(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """Send quiz question in session mode"""
    if chat_id not in user_states or user_states[chat_id]['mode'] != 'quiz_session':
        return

    session = user_states[chat_id]
    question = random.choice(quiz_questions)
    while question in session['session_questions'] and len(session['session_questions']) < len(quiz_questions):
        question = random.choice(quiz_questions)

    session['session_questions'].append(question)
    session['current_question'] = question
    session['start_time'] = time.time()
    session['answered'] = False

    text = (
        f"üéØ –í–æ–ø—Ä–æ—Å {session['current_question_num']}/{session['questions_count']}\n\n"
        f"üß† {question['question']}\n\n"
    )
    for option in question['options']:
        text += f"{option}\n"

    keyboard = [
        [
            InlineKeyboardButton("–ê", callback_data="quiz_–ê"),
            InlineKeyboardButton("–ë", callback_data="quiz_–ë"),
            InlineKeyboardButton("–í", callback_data="quiz_–í")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=reply_markup)

    # Schedule timer
    session['job'] = context.job_queue.run_once(
        question_timer, question['time_limit'], data=chat_id, chat_id=chat_id
    )

async def question_timer(context: ContextTypes.DEFAULT_TYPE):
    """Handle quiz question timeout"""
    chat_id = context.job.data
    if chat_id not in user_states or user_states[chat_id].get('answered', False):
        return

    user_states[chat_id]['answered'] = True
    question = user_states[chat_id]['current_question']
    correct_answer = question['answer']

    if chat_id not in user_scores:
        user_scores[chat_id] = {
            'name': "–ê–Ω–æ–Ω–∏–º",
            'correct': 0,
            'incorrect': 0,
            'total': 0
        }

    if user_states[chat_id].get('mode') == 'quiz_session':
        session = user_states[chat_id]
        user_scores[chat_id]['total'] += 1
        user_scores[chat_id]['incorrect'] += 1

        if session['current_question_num'] >= session['questions_count']:
            session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
            text = (
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {session['session_correct']}/{session['questions_count']} ({session_percentage}%)"
            )
            await context.bot.send_message(chat_id, text, reply_markup=get_main_keyboard())
            del user_states[chat_id]
        else:
            session['current_question_num'] += 1
            text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
            await context.bot.send_message(chat_id, text)
            await asyncio.sleep(2)
            await send_quiz_question_session(chat_id, context)
    else:
        user_scores[chat_id]['total'] += 1
        user_scores[chat_id]['incorrect'] += 1
        score = user_scores[chat_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)
        text = (
            f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )
        await context.bot.send_message(chat_id, text, reply_markup=get_main_keyboard())
        del user_states[chat_id]

async def callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle callback queries"""
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data
    username = query.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"

    await query.answer()

    if data.startswith('quiz_'):
        answer = data.replace('quiz_', '')
        await check_quiz_answer(chat_id, username, answer, context)
    elif data.startswith('difficulty_'):
        difficulty = data.replace('difficulty_', '')
        await start_quiz_with_difficulty(chat_id, difficulty, context)

async def check_quiz_answer(chat_id: int, username: str, user_answer: str, context: ContextTypes.DEFAULT_TYPE):
    """Check quiz answer"""
    if chat_id not in user_states or user_states[chat_id].get('mode') not in ['quiz', 'quiz_session']:
        return False

    if user_states[chat_id].get('answered', False):
        return False

    user_states[chat_id]['answered'] = True
    if user_states[chat_id].get('job'):
        user_states[chat_id]['job'].schedule_removal()

    start_time = user_states[chat_id].get('start_time', 0)
    current_time = time.time()
    response_time = round(current_time - start_time, 1) if start_time else 0
    time_limit = user_states[chat_id]['current_question']['time_limit']

    if start_time and response_time > time_limit:
        text = f"‚è∞ –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ ({response_time}—Å > {time_limit}—Å)"
        await context.bot.send_message(chat_id, text, reply_markup=get_main_keyboard())
        if user_states[chat_id].get('mode') != 'quiz_session':
            del user_states[chat_id]
        return True

    if user_states[chat_id].get('mode') == 'quiz_session':
        await handle_session_quiz_answer(chat_id, username, user_answer, context)
    else:
        await handle_single_quiz_answer(chat_id, username, user_answer, context)
    return True

async def handle_single_quiz_answer(chat_id: int, username: str, user_answer: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle single quiz question answer"""
    if chat_id not in user_scores:
        user_scores[chat_id] = {
            'name': username,
            'correct': 0,
            'incorrect': 0,
            'total': 0
        }

    correct_answer = user_states[chat_id]['current_question']['answer']
    difficulty = user_states[chat_id]['current_question']['difficulty']
    user_answer = user_answer.upper().strip()

    start_time = user_states[chat_id].get('start_time', 0)
    current_time = time.time()
    response_time = round(current_time - start_time, 1) if start_time else 0
    time_limit = user_states[chat_id]['current_question']['time_limit']

    time_bonus = ""
    if start_time and response_time <= time_limit * 0.5:
        time_bonus = " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!"
    elif start_time and response_time <= time_limit * 0.75:
        time_bonus = " üëç –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!"

    user_scores[chat_id]['total'] += 1
    difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
    emoji = difficulty_emoji.get(difficulty, '‚ö™')

    if user_answer == correct_answer:
        user_scores[chat_id]['correct'] += 1
        score = user_scores[chat_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)
        time_text = f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n" if start_time else ""
        text = (
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {emoji}{time_bonus} üéâ\n"
            f"{time_text}\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )
    else:
        user_scores[chat_id]['incorrect'] += 1
        score = user_scores[chat_id]
        percentage = round((score['correct'] / score['total']) * 100, 1)
        time_text = f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n" if start_time else ""
        text = (
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            f"{time_text}\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
        )

    await context.bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=get_main_keyboard())
    del user_states[chat_id]

async def handle_session_quiz_answer(chat_id: int, username: str, user_answer: str, context: ContextTypes.DEFAULT_TYPE):
    """Handle quiz session answer"""
    session = user_states[chat_id]
    if chat_id not in user_scores:
        user_scores[chat_id] = {
            'name': username,
            'correct': 0,
            'incorrect': 0,
            'total': 0
        }

    correct_answer = session['current_question']['answer']
    user_answer = user_answer.upper().strip()

    start_time = session.get('start_time', 0)
    current_time = time.time()
    response_time = round(current_time - start_time, 1) if start_time else 0
    time_limit = session['current_question']['time_limit']

    user_scores[chat_id]['total'] += 1
    if user_answer == correct_answer:
        user_scores[chat_id]['correct'] += 1
        session['session_correct'] += 1
        result_emoji = "‚úÖ"
        result_text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        if start_time and response_time <= time_limit * 0.5:
            result_text += " ‚ö°"
        elif start_time and response_time <= time_limit * 0.75:
            result_text += " üëç"
    else:
        user_scores[chat_id]['incorrect'] += 1
        result_emoji = "‚ùå"
        result_text = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    if session['current_question_num'] >= session['questions_count']:
        session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
        total_percentage = round((user_scores[chat_id]['correct'] / user_scores[chat_id]['total']) * 100, 1)
        final_text = (
            f"{result_emoji} {result_text}\n\n"
            f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['session_correct']}/{session['questions_count']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {session_percentage}%\n\n"
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_scores[chat_id]['correct']}\n"
            f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%"
        )
        if session_percentage == 100:
            final_text += "\n\nüèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        elif session_percentage >= 80:
            final_text += "\n\nü•á –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        elif session_percentage >= 60:
            final_text += "\n\nü•à –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"

        await context.bot.send_message(chat_id, final_text, parse_mode='HTML', reply_markup=get_main_keyboard())
        del user_states[chat_id]
    else:
        session['current_question_num'] += 1
        progress_text = (
            f"{result_emoji} {result_text}\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {session['session_correct']}/{session['current_question_num'] - 1} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
        )
        await context.bot.send_message(chat_id, progress_text, parse_mode='HTML')
        await asyncio.sleep(2)
        await send_quiz_question_session(chat_id, context)

async def start_quiz_with_difficulty(chat_id: int, difficulty: str, context: ContextTypes.DEFAULT_TYPE):
    """Start quiz with selected difficulty"""
    difficulty_settings = {
        'easy': {'count': 5, 'name': '–ë–∞–∑–æ–≤—ã–π'},
        'medium': {'count': 10, 'name': '–°—Ä–µ–¥–Ω–∏–π'},
        'hard': {'count': 15, 'name': '–°–ª–æ–∂–Ω—ã–π'},
        'expert': {'count': 20, 'name': '–≠–∫—Å–ø–µ—Ä—Ç'}
    }
    settings = difficulty_settings.get(difficulty, difficulty_settings['easy'])
    user_states[chat_id] = {
        'mode': 'quiz_session',
        'difficulty': difficulty,
        'questions_count': settings['count'],
        'current_question_num': 1,
        'session_correct': 0,
        'session_questions': [],
        'job': None
    }
    text = f"üéØ –†–µ–∂–∏–º: {settings['name']}\nüìù –í–æ–ø—Ä–æ—Å–æ–≤: {settings['count']}\n\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º!"
    await context.bot.send_message(chat_id, text, parse_mode='HTML')
    await send_quiz_question_session(chat_id, context)

def get_main_keyboard():
    """Get main keyboard markup"""
    keyboard = [
        [KeyboardButton("üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥"), KeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤")],
        [KeyboardButton("üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"), KeyboardButton("üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π")],
        [KeyboardButton("üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤"), KeyboardButton("üìê –§–æ—Ä–º—É–ª—ã")],
        [KeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton("üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"), KeyboardButton("üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming messages"""
    chat_id = update.effective_chat.id
    text = update.message.text
    username = update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"

    if await check_quiz_answer(chat_id, username, text, context):
        return

    commands = {
        "üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è": quiz,
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": stats,
        "üèÜ –†–µ–π—Ç–∏–Ω–≥": leaderboard,
        "üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤": dictionary,
        "üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏": useful_links,
        "üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π": course,
        "üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤": presentation_topics,
        "üìê –§–æ—Ä–º—É–ª—ã": formulas,
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": calculator,
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏": news,
        "‚ùì –ü–æ–º–æ—â—å": help_command,
        "üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏": difficulty_levels,
        "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞": quick_game
    }

    if text in commands:
        await commands[text](update, context)
    else:
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.",
            reply_markup=get_main_keyboard()
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_chat:
        await context.bot.send_message(
            update.effective_chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.",
            reply_markup=get_main_keyboard()
        )

async def main():
    """Main function to run the bot"""
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not set")
        sys.exit(1)

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("calc", calc))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(callback_query))
    application.add_error_handler(error_handler)

    # Set up webhook
    try:
        await application.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")
        logger.info(f"Webhook set to {WEBHOOK_URL}/{TOKEN}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")
        sys.exit(1)

    # Start the bot
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}",
        secret_token=TOKEN
    )

if __name__ == "__main__":
    asyncio.run(main())