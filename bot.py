import os
import logging
from telegram import Update, Bot
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    Dispatcher
)

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

if not TELEGRAM_TOKEN:
    logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ flyctl secrets set TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    user = update.effective_user
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id})")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ fly.io üöÄ"
    )

async def echo(update: Update, context: CallbackContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç"""
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {update.message.text}")
    await update.message.reply_text(update.message.text)

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}', exc_info=True)
    if update and update.effective_chat:
        await update.effective_chat.send_message(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )

# ===== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
def main() -> None:
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async
        bot = Bot(TELEGRAM_TOKEN)
        dispatcher = Dispatcher(bot=bot, update_queue=None, workers=4)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command, echo
        ))
        dispatcher.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater = Updater(bot=bot, dispatcher=dispatcher)
        updater.start_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            timeout=30,  # –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            read_latency=2.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–µ–Ω–∏—è
        )
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        updater.idle()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()