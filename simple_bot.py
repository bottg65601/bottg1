import os
import asyncio
import logging
from dotenv import load_dotenv
import random
import sys
import time
import threading

# Set UTF-8 encoding for output
sys.stdout.reconfigure(encoding='utf-8')

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# State management
user_states = {}
user_scores = {}

# Quiz questions based on economic theory lectures
quiz_questions = [
    {
        "question": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?",
        "options": ["–ê) –ó–∞–∫–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö–æ–∑—è–π—Å—Ç–≤–∞", "–ë) –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–í) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —è–≤–ª–µ–Ω–∏–π?",
        "options": ["–ê) –ú–µ—Ç–æ–¥ –Ω–∞—É—á–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏", "–ë) –¢–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "–í) –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20
    },
    {
        "question": "–ß—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è?",
        "options": ["–ê) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", "–ë) –ò–∑–±—ã—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "–í) –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30
    },
    {
        "question": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "options": ["–ê) –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è, –∫–æ–º–∞–Ω–¥–Ω–∞—è, —Ä—ã–Ω–æ—á–Ω–∞—è, —Å–º–µ—à–∞–Ω–Ω–∞—è", "–ë) –¢–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω–∞—è", "–í) –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —á–∞—Å—Ç–Ω–∞—è"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ö–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏?",
        "options": ["–ê) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ë) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ñ–ª—è—Ü–∏—é", "–í) –°–Ω–∏–∂–∞–µ—Ç —Å–ø—Ä–æ—Å –Ω–∞ –∫—Ä–µ–¥–∏—Ç"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª?",
        "options": ["–ê) –ü–µ—Ä–∏–æ–¥—ã —Ä–æ—Å—Ç–∞ –∏ —Å–ø–∞–¥–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏", "–ë) –£—Å—Ç–æ–π—á–∏–≤–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "–í) –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç —Ü–µ–Ω", "–ë) –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—É?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–ë) –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω", "–í) –í–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏—è —Ä—É–±–ª—è?",
        "options": ["–ê) –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–ë) –û—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ä—É–±–ª—è", "–í) –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞"],
        "answer": "–ë",
        "difficulty": "hard",
        "time_limit": 30
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω?",
        "options": ["–ê) –î–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏", "–ë) –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã", "–í) –û–±—ä—ë–º —ç–∫—Å–ø–æ—Ä—Ç–∞"],
        "answer": "–ê",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—Ü–µ—Å—Å–∏—è?",
        "options": ["–ê) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ë) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–ø–∞–¥", "–í) –°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—Å–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞?",
        "options": ["–ê) –ü–æ–ª–∏—Ç–∏–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–ë) –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞", "–í) –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞"],
        "answer": "–ê",
        "difficulty": "hard",
        "time_limit": 30
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ª–æ–≥ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º?",
        "options": ["–ê) –ù–î–°", "–ë) –ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥", "–í) –ê–∫—Ü–∏–∑"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –î–∂–∏–Ω–∏?",
        "options": ["–ê) –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏", "–ë) –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤", "–í) –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç"],
        "answer": "–ë",
        "difficulty": "medium",
        "time_limit": 20
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–≥—Ñ–ª—è—Ü–∏—è?",
        "options": ["–ê) –†–æ—Å—Ç + –∏–Ω—Ñ–ª—è—Ü–∏—è", "–ë) –°–ø–∞–¥ + –¥–µ—Ñ–ª—è—Ü–∏—è", "–í) –°—Ç–∞–≥–Ω–∞—Ü–∏—è + –∏–Ω—Ñ–ª—è—Ü–∏—è"],
        "answer": "–í",
        "difficulty": "hard",
        "time_limit": 30
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∏–¥ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã?",
        "options": ["–ê) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è", "–ë) –§—Ä–∏–∫—Ü–∏–æ–Ω–Ω–∞—è", "–í) –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è"],
        "answer": "–ë",
        "difficulty": "easy",
        "time_limit": 10
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å?",
        "options": ["–ê) –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å–≥–∏", "–ë) –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–í) –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"],
        "answer": "–ê",
        "difficulty": "medium",
        "time_limit": 20
    }
]

# Simple HTTP-based bot using webhooks
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.request
import urllib.parse

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"

    def send_message(self, chat_id, text, reply_markup=None):
        """Send message to Telegram chat"""
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }

        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)

        try:
            req_data = urllib.parse.urlencode(data).encode('utf-8')
            request = urllib.request.Request(f"{self.api_url}/sendMessage", data=req_data)
            request.add_header('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8')
            response = urllib.request.urlopen(request)
            return json.loads(response.read().decode('utf-8'))
        except Exception as e:
            print(f"Error sending message: {e}")
            return None

    def _question_timer(self, chat_id, time_limit):
        """Timer for quiz questions"""
        time.sleep(time_limit)

        # Check if user is still in quiz mode and hasn't answered
        if chat_id in user_states and user_states[chat_id].get('mode') in ['quiz', 'quiz_session'] and not user_states[chat_id].get('answered', False):
            # Time's up
            question = user_states[chat_id]['current_question']
            correct_answer = question['answer']

            # Mark as answered to prevent double processing
            user_states[chat_id]['answered'] = True

            # Update user statistics
            if chat_id not in user_scores:
                user_scores[chat_id] = {
                    'name': "–ê–Ω–æ–Ω–∏–º",
                    'correct': 0,
                    'incorrect': 0,
                    'total': 0
                }

            # Handle session mode differently
            if user_states[chat_id].get('mode') == 'quiz_session':
                session = user_states[chat_id]
                user_scores[chat_id]['total'] += 1
                user_scores[chat_id]['incorrect'] += 1

                # Check if session should continue
                if session['current_question_num'] >= session['questions_count']:
                    # Session complete
                    session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
                    text = (
                        f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                        f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {session['session_correct']}/{session['questions_count']} ({session_percentage}%)"
                    )
                    self.send_message(chat_id, text, self.get_main_keyboard())
                    del user_states[chat_id]
                else:
                    # Continue session
                    session['current_question_num'] += 1
                    text = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
                    self.send_message(chat_id, text)
                    time.sleep(2)
                    self.quiz_question_session(chat_id)
            else:
                # Single question mode
                user_scores[chat_id]['total'] += 1
                user_scores[chat_id]['incorrect'] += 1

                score = user_scores[chat_id]
                percentage = round((score['correct'] / score['total']) * 100, 1)

                text = (
                    f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                    f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
                )

                self.send_message(chat_id, text, self.get_main_keyboard())
                del user_states[chat_id]

    def get_main_keyboard(self):
        """Get main keyboard markup"""
        return {
            'keyboard': [
                [{'text': 'üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è'}, {'text': 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}],
                [{'text': 'üèÜ –†–µ–π—Ç–∏–Ω–≥'}, {'text': 'üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤'}],
                [{'text': 'üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'}, {'text': 'üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π'}],
                [{'text': 'üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤'}, {'text': 'üìê –§–æ—Ä–º—É–ª—ã'}],
                [{'text': 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'}, {'text': 'üì∞ –ù–æ–≤–æ—Å—Ç–∏'}],
                [{'text': 'üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'}, {'text': 'üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞'}],
                [{'text': '‚ùì –ü–æ–º–æ—â—å'}]
            ],
            'resize_keyboard': True
        }

    def quiz_question(self, chat_id):
        """Send quiz question with timer"""
        question = random.choice(quiz_questions)

        # Get difficulty level emoji
        difficulty_emoji = {
            'easy': 'üü¢',
            'medium': 'üü°', 
            'hard': 'üî¥'
        }

        difficulty_text = {
            'easy': '–õ–µ–≥–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π',
            'hard': '–°–ª–æ–∂–Ω—ã–π'
        }

        # Save user state with timer
        user_states[chat_id] = {
            'mode': 'quiz',
            'current_question': question,
            'start_time': time.time(),
            'answered': False
        }

        emoji = difficulty_emoji.get(question['difficulty'], '‚ö™')
        diff_name = difficulty_text.get(question['difficulty'], '–û–±—ã—á–Ω—ã–π')

        text = f"üß† –í–æ–ø—Ä–æ—Å ({emoji} {diff_name}, {question['time_limit']} —Å–µ–∫.):\n{question['question']}\n\n"
        for option in question['options']:
            text += f"{option}\n"

        # Create inline keyboard for quiz answers
        inline_keyboard = {
            'inline_keyboard': [
                [
                    {'text': '–ê', 'callback_data': 'quiz_–ê'},
                    {'text': '–ë', 'callback_data': 'quiz_–ë'},
                    {'text': '–í', 'callback_data': 'quiz_–í'}
                ]
            ]
        }

        text += f"\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {question['time_limit']} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!\n–û—Ç–≤–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π (–ê, –ë –∏–ª–∏ –í)"

        self.send_message(chat_id, text, inline_keyboard)

        # Start timer thread
        timer_thread = threading.Thread(target=self._question_timer, args=(chat_id, question['time_limit']))
        timer_thread.daemon = True
        timer_thread.start()

    def check_quiz_answer(self, chat_id, username, user_answer):
        """Check quiz answer with timer validation"""
        if chat_id not in user_states or user_states[chat_id].get('mode') not in ['quiz', 'quiz_session']:
            return False

        # Check if already answered (timer expired)
        if user_states[chat_id].get('answered', False):
            return False

        # Mark as answered to prevent timer from processing
        user_states[chat_id]['answered'] = True

        # Calculate response time if available
        start_time = user_states[chat_id].get('start_time', 0)
        current_time = time.time()
        response_time = round(current_time - start_time, 1) if start_time else 0
        time_limit = user_states[chat_id]['current_question']['time_limit']

        # Check if answer was given in time (only if timer was started)
        if start_time and response_time > time_limit:
            text = f"‚è∞ –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ ({response_time}—Å > {time_limit}—Å)"
            self.send_message(chat_id, text, self.get_main_keyboard())
            if user_states[chat_id].get('mode') != 'quiz_session':
                del user_states[chat_id]
            return True

        # Check which mode we're in
        if user_states[chat_id].get('mode') == 'quiz_session':
            return self._handle_session_quiz_answer(chat_id, username, user_answer)
        else:
            return self._handle_single_quiz_answer(chat_id, username, user_answer)

    def _handle_single_quiz_answer(self, chat_id, username, user_answer):
        """Handle single quiz question answer"""
        # Initialize user score if not exists
        if chat_id not in user_scores:
            user_scores[chat_id] = {
                'name': username or "–ê–Ω–æ–Ω–∏–º",
                'correct': 0,
                'incorrect': 0,
                'total': 0
            }

        correct_answer = user_states[chat_id]['current_question']['answer']
        user_answer = user_answer.upper().strip()
        difficulty = user_states[chat_id]['current_question']['difficulty']

        # Calculate response time and bonus
        start_time = user_states[chat_id].get('start_time', 0)
        current_time = time.time()
        response_time = round(current_time - start_time, 1) if start_time else 0
        time_limit = user_states[chat_id]['current_question']['time_limit']

        # Time bonus calculation
        time_bonus = ""
        if start_time and response_time <= time_limit * 0.5:
            time_bonus = " ‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç!"
        elif start_time and response_time <= time_limit * 0.75:
            time_bonus = " üëç –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!"

        # Update statistics
        user_scores[chat_id]['total'] += 1

        difficulty_emoji = {'easy': 'üü¢', 'medium': 'üü°', 'hard': 'üî¥'}
        emoji = difficulty_emoji.get(difficulty, '‚ö™')

        if user_answer == correct_answer:
            user_scores[chat_id]['correct'] += 1
            score = user_scores[chat_id]
            percentage = round((score['correct'] / score['total']) * 100, 1)
            
            time_text = f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n" if start_time else ""
            
            text = (
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {emoji}{time_bonus} üéâ\n"
                f"{time_text}\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
            )
        else:
            user_scores[chat_id]['incorrect'] += 1
            score = user_scores[chat_id]
            percentage = round((score['correct'] / score['total']) * 100, 1)
            
            time_text = f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}—Å –∏–∑ {time_limit}—Å\n" if start_time else ""
            
            text = (
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
                f"{time_text}\n"
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%"
            )

        self.send_message(chat_id, text, self.get_main_keyboard())
        del user_states[chat_id]
        return True

    def _handle_session_quiz_answer(self, chat_id, username, user_answer):
        """Handle quiz session answer"""
        session = user_states[chat_id]

        # Initialize user score if not exists
        if chat_id not in user_scores:
            user_scores[chat_id] = {
                'name': username or "–ê–Ω–æ–Ω–∏–º",
                'correct': 0,
                'incorrect': 0,
                'total': 0
            }

        correct_answer = session['current_question']['answer']
        user_answer = user_answer.upper().strip()

        # Calculate response time
        start_time = session.get('start_time', 0)
        current_time = time.time()
        response_time = round(current_time - start_time, 1) if start_time else 0
        time_limit = session['current_question']['time_limit']

        # Update session and global statistics
        user_scores[chat_id]['total'] += 1

        if user_answer == correct_answer:
            user_scores[chat_id]['correct'] += 1
            session['session_correct'] += 1
            result_emoji = "‚úÖ"
            result_text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
            
            # Time bonus
            if start_time and response_time <= time_limit * 0.5:
                result_text += " ‚ö°"
            elif start_time and response_time <= time_limit * 0.75:
                result_text += " üëç"
        else:
            user_scores[chat_id]['incorrect'] += 1
            result_emoji = "‚ùå"
            result_text = f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        # Check if session is complete
        if session['current_question_num'] >= session['questions_count']:
            # Session complete
            session_percentage = round((session['session_correct'] / session['questions_count']) * 100, 1)
            total_percentage = round((user_scores[chat_id]['correct'] / user_scores[chat_id]['total']) * 100, 1)

            final_text = (
                f"{result_emoji} {result_text}\n\n"
                f"üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session['session_correct']}/{session['questions_count']}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç: {session_percentage}%\n\n"
                f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_scores[chat_id]['correct']}\n"
                f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {total_percentage}%"
            )

            # Add achievement
            if session_percentage == 100:
                final_text += "\n\nüèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            elif session_percentage >= 80:
                final_text += "\n\nü•á –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            elif session_percentage >= 60:
                final_text += "\n\nü•à –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"

            self.send_message(chat_id, final_text, self.get_main_keyboard())
            del user_states[chat_id]
        else:
            # Continue session
            session['current_question_num'] += 1

            progress_text = (
                f"{result_emoji} {result_text}\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {session['session_correct']}/{session['current_question_num'] - 1} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö\n"
                f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
            )

            self.send_message(chat_id, progress_text)

            # Small delay before next question
            threading.Timer(2.0, self.quiz_question_session, args=[chat_id]).start()

        return True

    def show_leaderboard(self, chat_id):
        """Show leaderboard"""
        if not user_scores:
            self.send_message(
                chat_id, 
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!",
                self.get_main_keyboard()
            )
            return

        # Sort by percentage, then by correct answers
        sorted_users = sorted(
            user_scores.items(),
            key=lambda x: (x[1]['correct'] / max(x[1]['total'], 1), x[1]['correct']),
            reverse=True
        )

        text = "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        for i, (user_id, score) in enumerate(sorted_users[:10], 1):
            percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)
            text += f"{i}. {score['name']} - {percentage}% ({score['correct']}/{score['total']})\n"

        self.send_message(chat_id, text, self.get_main_keyboard())

    def show_stats(self, chat_id):
        """Show user statistics"""
        if chat_id not in user_scores:
            self.send_message(
                chat_id,
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
                self.get_main_keyboard()
            )
            return

        score = user_scores[chat_id]
        percentage = round((score['correct'] / max(score['total'], 1)) * 100, 1)

        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë§ –ò–º—è: {score['name']}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['correct']}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score['incorrect']}\n"
            f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {score['total']}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage}%\n\n"
        )

        # Determine skill level
        if percentage >= 90:
            stats_text += "üèÜ –£—Ä–æ–≤–µ–Ω—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ!"
        elif percentage >= 75:
            stats_text += "ü•á –£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif percentage >= 60:
            stats_text += "ü•à –£—Ä–æ–≤–µ–Ω—å: –•–æ—Ä–æ—à–∏–π"
        elif percentage >= 40:
            stats_text += "ü•â –£—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π"
        else:
            stats_text += "üìö –£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π"

        self.send_message(chat_id, stats_text, self.get_main_keyboard())

    def show_dictionary(self, chat_id):
        """Show economics dictionary"""
        text = "üìö –°–ª–æ–≤–∞—Ä—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:\n\n"
        dictionary = {
            "–í–í–ü": "–í–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç - –æ–±—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            "–ò–Ω—Ñ–ª—è—Ü–∏—è": "–£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ.",
            "–î–µ—Ñ–ª—è—Ü–∏—è": "–°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏–∏.",
            "–†–µ—Ü–µ—Å—Å–∏—è": "–ü–µ—Ä–∏–æ–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∞–¥–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –í–í–ü –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ –ø–æ–¥—Ä—è–¥.",
            "–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞": "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –±–∞–Ω–∫–∞–º."
        }

        for term, definition in dictionary.items():
            text += f"üîπ <b>{term}</b>\n{definition}\n\n"

        self.send_message(chat_id, text, self.get_main_keyboard())

    def show_useful_links(self, chat_id):
        """Show useful links"""
        text = "üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:\n\n"
        links = {
            "üìà –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§": "https://cbr.ru - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –¶–ë –†–§",
            "üìä –†–æ—Å—Å—Ç–∞—Ç": "https://rosstat.gov.ru - –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            "üíº –ú–∏–Ω—ç–∫–æ–Ω–æ–º—Ä–∞–∑–≤–∏—Ç–∏—è": "https://economy.gov.ru - –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –†–§",
            "üì∞ –†–ë–ö –≠–∫–æ–Ω–æ–º–∏–∫–∞": "https://rbc.ru/economics - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
        }

        for name, link in links.items():
            text += f"{name}\n{link}\n\n"

        self.send_message(chat_id, text, self.get_main_keyboard())

    def show_course(self, chat_id):
        """Show course materials"""
        course_text = (
            "üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ:\n\n"
            "üìñ <b>–ú–æ–¥—É–ª—å 1: –û—Å–Ω–æ–≤—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏</b>\n"
            "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –∏ –º–µ—Ç–æ–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–∞—É–∫–∏\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è\n"
            "‚Ä¢ –¢–∏–ø—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º\n\n"
            "üìñ <b>–ú–æ–¥—É–ª—å 2: –ú–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞</b>\n"
            "‚Ä¢ –°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è\n\n"
            "üìñ <b>–ú–æ–¥—É–ª—å 3: –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞</b>\n"
            "‚Ä¢ –í–í–ü –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞\n"
            "‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è –∏ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞\n"
            "‚Ä¢ –î–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞\n\n"
            "üí° –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'"
        )
        self.send_message(chat_id, course_text, self.get_main_keyboard())

    def show_presentation_topics(self, chat_id):
        """Show presentation topics"""
        text = "üìΩÔ∏è –¢–µ–º—ã –¥–ª—è –¥–æ–∫–ª–∞–¥–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:\n\n"
        topics = [
            "üè¶ –†–æ–ª—å –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏",
            "üí± –í–ª–∏—è–Ω–∏–µ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É",
            "üìà –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –í–í–ü –†–æ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç",
            "üè≠ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            "üåç –í–ª–∏—è–Ω–∏–µ —Å–∞–Ω–∫—Ü–∏–π –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É –†–æ—Å—Å–∏–∏",
            "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä –∫–∞–∫ –¥—Ä–∞–π–≤–µ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏",
            "üåæ –†–æ–ª—å –∞–≥—Ä–∞—Ä–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –†–æ—Å—Å–∏–∏",
            "üíº –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å: –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"
        ]

        for i, topic in enumerate(topics, 1):
            text += f"{i}. {topic}\n"

        text += f"\nüí° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!"
        self.send_message(chat_id, text, self.get_main_keyboard())

    def show_formulas(self, chat_id):
        """Show economic formulas"""
        text = "üìê –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:\n\n"
        formulas = {
            "–¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏": "((–ò–ü–¶_—Ç–µ–∫—É—â–∏–π - –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) / –ò–ü–¶_–±–∞–∑–æ–≤—ã–π) √ó 100%",
            "–†–µ–∞–ª—å–Ω—ã–π –í–í–ü": "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π –í–í–ü / –î–µ—Ñ–ª—è—Ç–æ—Ä –í–í–ü",
            "–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã": "(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã—Ö / –†–∞–±–æ—á–∞—è —Å–∏–ª–∞) √ó 100%",
            "–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞": "–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏"
        }

        for formula_name, formula in formulas.items():
            text += f"üîπ <b>{formula_name}</b>\n{formula}\n\n"

        self.send_message(chat_id, text, self.get_main_keyboard())

    def show_calculator(self, chat_id):
        """Show calculator options"""
        calc_text = (
            "üßÆ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:</b>\n\n"
            "üìä –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏\n"
            "üí∞ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞\n"
            "üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –í–í–ü\n"
            "üíº –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã\n\n"
            "üí° –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/calc [—Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞] [–∑–Ω–∞—á–µ–Ω–∏—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /calc inflation 100 105 (–∏–Ω—Ñ–ª—è—Ü–∏—è)\n"
            "‚Ä¢ /calc real_rate 10 3 (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞)\n"
            "‚Ä¢ /calc growth 1000 1100 (—Ä–æ—Å—Ç –í–í–ü)\n"
            "‚Ä¢ /calc unemployment 50 1000 (–±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞)"
        )
        self.send_message(chat_id, calc_text, self.get_main_keyboard())

    def handle_calculator(self, chat_id, command_parts):
        """Handle calculator commands"""
        if len(command_parts) < 2:
            self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calc [—Ç–∏–ø] [–∑–Ω–∞—á–µ–Ω–∏—è]", self.get_main_keyboard())
            return

        calc_type = command_parts[1].lower()

        try:
            if calc_type == "inflation" and len(command_parts) >= 4:
                old_value = float(command_parts[2])
                new_value = float(command_parts[3])
                inflation_rate = ((new_value - old_value) / old_value) * 100
                result = f"üìä –¢–µ–º–ø –∏–Ω—Ñ–ª—è—Ü–∏–∏: {inflation_rate:.2f}%"

            elif calc_type == "real_rate" and len(command_parts) >= 4:
                nominal_rate = float(command_parts[2])
                inflation_rate = float(command_parts[3])
                real_rate = nominal_rate - inflation_rate
                result = f"üí∞ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {real_rate:.2f}%"

            elif calc_type == "growth" and len(command_parts) >= 4:
                old_gdp = float(command_parts[2])
                new_gdp = float(command_parts[3])
                growth_rate = ((new_gdp - old_gdp) / old_gdp) * 100
                result = f"üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –í–í–ü: {growth_rate:.2f}%"

            elif calc_type == "unemployment" and len(command_parts) >= 4:
                unemployed = float(command_parts[2])
                labor_force = float(command_parts[3])
                unemployment_rate = (unemployed / labor_force) * 100
                result = f"üíº –£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã: {unemployment_rate:.2f}%"

            else:
                result = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"

            self.send_message(chat_id, result, self.get_main_keyboard())

        except ValueError:
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", self.get_main_keyboard())
        except ZeroDivisionError:
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", self.get_main_keyboard())

    def show_news(self, chat_id):
        """Show news sources"""
        news_text = (
            "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
            "üî∏ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
            "‚Ä¢ –†–ë–ö –≠–∫–æ–Ω–æ–º–∏–∫–∞ - rbc.ru/economics\n"
            "‚Ä¢ –í–µ–¥–æ–º–æ—Å—Ç–∏ - vedomosti.ru\n"
            "‚Ä¢ –ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä - kommersant.ru\n\n"
            "üî∏ <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
            "‚Ä¢ Bloomberg - bloomberg.com\n"
            "‚Ä¢ Financial Times - ft.com\n"
            "‚Ä¢ Reuters Economics - reuters.com\n\n"
            "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏!"
        )
        self.send_message(chat_id, news_text, self.get_main_keyboard())

    def send_help(self, chat_id):
        """Send help message"""
        help_text = (
            "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
            "üñãÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
            "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥</b> - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "üìö <b>–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è\n"
            "üìà <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</b> - –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
            "üìí <b>–ö—É—Ä—Å –ª–µ–∫—Ü–∏–π</b> - —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "üìΩÔ∏è <b>–¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤</b> - –∏–¥–µ–∏ –¥–ª—è —Ä–∞–±–æ—Ç\n"
            "üìê <b>–§–æ—Ä–º—É–ª—ã</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã\n"
            "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
            "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
            "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –±—É–∫–≤–∞–º–∏ –ê, –ë –∏–ª–∏ –í\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        )
        self.send_message(chat_id, help_text, self.get_main_keyboard())

    def show_difficulty_levels(self, chat_id):
        """Show difficulty level selection"""
        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n"

        inline_keyboard = {
            'inline_keyboard': [
                [{'text': 'üü¢ –ë–∞–∑–æ–≤—ã–π (5 –≤–æ–ø—Ä–æ—Å–æ–≤)', 'callback_data': 'difficulty_easy'}],
                [{'text': 'üü° –°—Ä–µ–¥–Ω–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤)', 'callback_data': 'difficulty_medium'}],
                [{'text': 'üî¥ –°–ª–æ–∂–Ω—ã–π (15 –≤–æ–ø—Ä–æ—Å–æ–≤)', 'callback_data': 'difficulty_hard'}],
                [{'text': 'üèÜ –≠–∫—Å–ø–µ—Ä—Ç (20 –≤–æ–ø—Ä–æ—Å–æ–≤)', 'callback_data': 'difficulty_expert'}]
            ]
        }

        self.send_message(chat_id, text, inline_keyboard)

    def start_quiz_with_difficulty(self, chat_id, difficulty):
        """Start quiz with selected difficulty"""
        difficulty_settings = {
            'easy': {'count': 5, 'name': '–ë–∞–∑–æ–≤—ã–π'},
            'medium': {'count': 10, 'name': '–°—Ä–µ–¥–Ω–∏–π'},
            'hard': {'count': 15, 'name': '–°–ª–æ–∂–Ω—ã–π'},
            'expert': {'count': 20, 'name': '–≠–∫—Å–ø–µ—Ä—Ç'}
        }

        settings = difficulty_settings.get(difficulty, difficulty_settings['easy'])

        # Initialize quiz session
        user_states[chat_id] = {
            'mode': 'quiz_session',
            'difficulty': difficulty,
            'questions_count': settings['count'],
            'current_question_num': 1,
            'session_correct': 0,
            'session_questions': []
        }

        text = f"üéØ –†–µ–∂–∏–º: {settings['name']}\nüìù –í–æ–ø—Ä–æ—Å–æ–≤: {settings['count']}\n\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º!"
        self.send_message(chat_id, text)

        # Start first question
        self.quiz_question_session(chat_id)

    def quiz_question_session(self, chat_id):
        """Send quiz question in session mode"""
        if chat_id not in user_states or user_states[chat_id]['mode'] != 'quiz_session':
            return

        session = user_states[chat_id]
        question = random.choice(quiz_questions)

        # Avoid repeating questions in session
        while question in session['session_questions'] and len(session['session_questions']) < len(quiz_questions):
            question = random.choice(quiz_questions)

        session['session_questions'].append(question)
        session['current_question'] = question

        text = (
            f"üéØ –í–æ–ø—Ä–æ—Å {session['current_question_num']}/{session['questions_count']}\n\n"
            f"üß† {question['question']}\n\n"
        )

        for option in question['options']:
            text += f"{option}\n"

        inline_keyboard = {
            'inline_keyboard': [
                [
                    {'text': '–ê', 'callback_data': 'quiz_–ê'},
                    {'text': '–ë', 'callback_data': 'quiz_–ë'},
                    {'text': '–í', 'callback_data': 'quiz_–í'}
                ]
            ]
        }

        self.send_message(chat_id, text, inline_keyboard)

    def start_quick_game(self, chat_id):
        """Start quick 5-question game"""
        text = "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!\n\nüöÄ –ü–æ–µ—Ö–∞–ª–∏!"
        self.send_message(chat_id, text)

        user_states[chat_id] = {
            'mode': 'quiz_session',
            'difficulty': 'quick',
            'questions_count': 5,
            'current_question_num': 1,
            'session_correct': 0,
            'session_questions': []
        }

        self.quiz_question_session(chat_id)

    def send_start(self, chat_id, username):
        """Send start message"""
        user_name = username or "–¥—Ä—É–≥"
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
            f"üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
            f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            f"üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
            f"üéØ –í—ã–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
            f"üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        )
        self.send_message(chat_id, welcome_text, self.get_main_keyboard())

    def handle_callback_query(self, callback_query):
        """Handle callback query (inline keyboard buttons)"""
        query_id = callback_query['id']
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        username = callback_query['from'].get('first_name', '')

        # Answer callback query
        try:
            answer_url = f"{self.api_url}/answerCallbackQuery"
            answer_data = urllib.parse.urlencode({'callback_query_id': query_id}).encode('utf-8')
            urllib.request.urlopen(urllib.request.Request(answer_url, data=answer_data))
        except:
            pass

        # Handle quiz answers
        if data.startswith('quiz_'):
            answer = data.replace('quiz_', '')
            self.check_quiz_answer(chat_id, username, answer)
            return

        # Handle difficulty selection
        elif data.startswith('difficulty_'):
            difficulty = data.replace('difficulty_', '')
            self.start_quiz_with_difficulty(chat_id, difficulty)
            return

    def handle_message(self, chat_id, text, username):
        """Handle incoming message"""
        # Check if user is in quiz mode
        if self.check_quiz_answer(chat_id, username, text):
            return

        # Handle button commands
        if text == "üñãÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è":
            self.quiz_question(chat_id)
        elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            self.show_stats(chat_id)
        elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
            self.show_leaderboard(chat_id)
        elif text == "üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤":
            self.show_dictionary(chat_id)
        elif text == "üìà –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏":
            self.show_useful_links(chat_id)
        elif text == "üìí –ö—É—Ä—Å –ª–µ–∫—Ü–∏–π":
            self.show_course(chat_id)
        elif text == "üìΩÔ∏è –¢–µ–º—ã –¥–æ–∫–ª–∞–¥–æ–≤":
            self.show_presentation_topics(chat_id)
        elif text == "üìê –§–æ—Ä–º—É–ª—ã":
            self.show_formulas(chat_id)
        elif text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            self.show_calculator(chat_id)
        elif text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
            self.show_news(chat_id)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            self.send_help(chat_id)
        elif text == "üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏":
            self.show_difficulty_levels(chat_id)
        elif text == "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞":
            self.start_quick_game(chat_id)
        elif text == "/start":
            self.send_start(chat_id, username)
        elif text == "/quiz":
            self.quiz_question(chat_id)
        elif text == "/stats":
            self.show_stats(chat_id)
        elif text == "/leaderboard":
            self.show_leaderboard(chat_id)
        elif text == "/help":
            self.send_help(chat_id)
        elif text.startswith("/calc"):
            command_parts = text.split()
            self.handle_calculator(chat_id, command_parts)
        else:
            # Unknown command
            self.send_message(
                chat_id,
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.",
                self.get_main_keyboard()
            )

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))

            if 'message' in data:
                message = data['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')
                username = message.get('from', {}).get('first_name', '')

                bot.handle_message(chat_id, text, username)

            elif 'callback_query' in data:
                bot.handle_callback_query(data['callback_query'])

            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        except Exception as e:
            print(f"Error handling webhook: {e}")
            self.send_response(500)
            self.end_headers()

def run_polling():
    """Run bot in polling mode"""
    offset = 0
    error_count = 0
    max_errors = 5

    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    while True:
        try:
            # Get updates
            url = f"{bot.api_url}/getUpdates?offset={offset}&timeout=30"

            # Create request with proper headers
            request = urllib.request.Request(url)
            request.add_header('User-Agent', 'TelegramBot/1.0')

            response = urllib.request.urlopen(request, timeout=35)
            data = json.loads(response.read().decode('utf-8'))

            if data['ok']:
                error_count = 0  # Reset error count on success
                for update in data['result']:
                    offset = update['update_id'] + 1

                    if 'message' in update:
                        message = update['message']
                        chat_id = message['chat']['id']
                        text = message.get('text', '')
                        username = message.get('from', {}).get('first_name', '')

                        bot.handle_message(chat_id, text, username)

                    elif 'callback_query' in update:
                        bot.handle_callback_query(update['callback_query'])
            else:
                print(f"‚ùå API error: {data.get('description', 'Unknown error')}")

        except urllib.error.HTTPError as e:
            error_count += 1
            if e.code == 409:
                print(f"‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling ({error_count}/{max_errors}): –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                if error_count >= max_errors:
                    print("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.")
                    break
                import time
                time.sleep(10)  # Wait longer for 409 errors
            else:
                print(f"Polling error ({error_count}/{max_errors}): HTTP Error {e.code}: {e.reason}")
                import time
                time.sleep(5)

        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break

        except Exception as e:
            error_count += 1
            print(f"Polling error ({error_count}/{max_errors}): {e}")
            if error_count >= max_errors:
                print("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
                break
            import time
            time.sleep(5)

if __name__ == "__main__":
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        exit(1)

    print("ü§ñ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞-–±–æ—Ç–∞...")
    bot = TelegramBot(TOKEN)

    # Test bot connection and clear pending updates
    try:
        # Get bot info
        response = urllib.request.urlopen(f"{bot.api_url}/getMe")
        data = json.loads(response.read().decode('utf-8'))
        if data['ok']:
            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{data['result']['username']}")
            print(f"üìù –ò–º—è –±–æ—Ç–∞: {data['result']['first_name']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É")
            exit(1)

        # Clear any pending updates to avoid conflicts
        try:
            clear_url = f"{bot.api_url}/getUpdates?offset=-1"
            urllib.request.urlopen(clear_url)
            print("üßπ –û—á–∏—â–µ–Ω—ã –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        except:
            pass  # If clearing fails, continue anyway

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        exit(1)

    print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
    try:
        run_polling()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")